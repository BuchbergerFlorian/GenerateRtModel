<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Interop.zenOn.dll</name>
  </assembly>
  <members>
    <member name="T:zenOn.Alarm">
      <summary>Provides access to the alarm control system, active alarms and their current status.</summary>
    </member>
    <member name="P:zenOn.Alarm.Aktiv">
      <summary>Alarm-module in-/active</summary>
    </member>
    <member name="P:zenOn.Alarm.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Alarm.AlarmAcknowledge">
      <summary>Acknowledge alarm with given parameters</summary>
    </member>
    <member name="M:zenOn.Alarm.AlarmItems">
      <summary>Returns the alarm-items objects</summary>
    </member>
    <member name="M:zenOn.Alarm.AlarmItemsAsXml">
      <summary>Returns the alarm-items as XML</summary>
    </member>
    <member name="M:zenOn.Alarm.DynProperties [GET]" />
    <member name="M:zenOn.Alarm.DynProperties [PUT]">
      <summary>With DynProperties it is possible to get access to additional Properties/Methods of Objects.</summary>
    </member>
    <member name="M:zenOn.Alarm.DynPropertiesEnum [GET]">
      <summary>Returns a StringArray of all Dynproperties available for this Object.</summary>
    </member>
    <member name="M:zenOn.Alarm.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.Alarm.OnlineAlarmCollection [GET]">
      <summary>Returns the OnlineAlarms object.</summary>
    </member>
    <member name="M:zenOn.Alarm.ResetQueryFilter">
      <summary>Resets the QueryFilter</summary>
    </member>
    <member name="E:zenOn.Alarm.AlarmAcknowledged">
      <summary>Event: Is fired by alarm acknowledged...</summary>
    </member>
    <member name="E:zenOn.Alarm.AlarmComes">
      <summary>Event: Is fired by alarm coming...</summary>
    </member>
    <member name="E:zenOn.Alarm.AlarmGoes">
      <summary>Event: Is fired by alarm going...</summary>
    </member>
    <member name="E:zenOn.Alarm.AlarmListSelectionChanged" />
    <member name="E:zenOn.Alarm.AlarmUsertextChanged">
      <summary>Event: Is fired when the usertext has changed...</summary>
    </member>
    <member name="E:zenOn.Alarm.SelectionChangedEx">
      <summary>Event: selection array in the alarm list has been changed...</summary>
    </member>
    <member name="T:zenOn.AlarmFieldData " />
    <member name="P:zenOn.AlarmFieldData .Text" />
    <member name="P:zenOn.AlarmFieldData .Type" />
    <member name="T:zenOn.AlarmItem">
      <summary>The object AlarmItem contains information on an alarm.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.AlarmClass">
      <summary>Returns the defined alarm class.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.AlarmGroup">
      <summary>Returns the defined alarm group.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Cause">
      <summary>Cause of the alarm.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Computer">
      <summary>Returns the name of the computer, on which the action occurred.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Countreactivated">
      <summary>Returns the number of the reactivations of the alarm.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Index">
      <summary>Index of the alarm in the variable limits list or conditions in reaction matrix</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Name">
      <summary>This property returns the name of the variable linked to the alarm entry.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Projectname">
      <summary>Returns the name of the project in which the alarm occurred.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Status">
      <summary>Status of the variable</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Statusreactivated">
      <summary>Returns the status of the reactivated, violated value.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Tagname">
      <summary>TagName of the linked variable</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Text">
      <summary>Alarmtext of the variable (limit/rema)</summary>
    </member>
    <member name="P:zenOn.AlarmItem.TimeAcknowledged">
      <summary>Contains the time stamp of the event „acknowledged“.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Timecomes">
      <summary>Time of the alarm</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Timegoes">
      <summary>Contains the time stamp of the event „cleared“.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Timequitted">
      <summary>For internal use only</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Timereactivated">
      <summary>Contains the time stamp of the last event „received“.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.User">
      <summary>Returns the identification of the user that acknowledged the current alarm.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Usertext">
      <summary>Additional text defined by the user.</summary>
    </member>
    <member name="P:zenOn.AlarmItem.Value">
      <summary>Value of the variable</summary>
    </member>
    <member name="M:zenOn.AlarmItem.Acknowledge">
      <summary>Set an Alarm as "acknowledged".</summary>
    </member>
    <member name="M:zenOn.AlarmItem.Delete">
      <summary>Delete the Alarm</summary>
    </member>
    <member name="M:zenOn.AlarmItem.GetFieldData" />
    <member name="M:zenOn.AlarmItem.Quit">
      <summary>For internal use only</summary>
    </member>
    <member name="M:zenOn.AlarmItem.Variable">
      <summary>Returns the linked variable</summary>
    </member>
    <member name="T:zenOn.AlarmItems">
      <summary>The alarm entries are administered in this collection.</summary>
    </member>
    <member name="P:zenOn.AlarmItems.Aktiv">
      <summary>Alarm-module in-/active</summary>
    </member>
    <member name="P:zenOn.AlarmItems.Count">
      <summary>Count of the alarm-items</summary>
    </member>
    <member name="P:zenOn.AlarmItems.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="M:zenOn.AlarmItems.Item">
      <summary>Returns the alarm-item on the given position</summary>
    </member>
    <member name="T:zenOn.ALCEdge">
      <summary>Gets information about a selected procedural element.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ElementID">
      <summary>Returns the ID of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ElementRef">
      <summary>Returns the reference name of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.GroundFaultType">
      <summary>Returns the ground fault detection type if the edge is of type Switch.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.GroundFaultVarDisp">
      <summary>Returns the attached ground fault display Variable if ground fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.GroundFaultVarFwd">
      <summary>Returns the attached ground fault forward Variable if ground fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.GroundFaultVarRev">
      <summary>Returns the attached ground fault reverse Variable if ground fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.GroundFaultVarTrg">
      <summary>Returns the attached ground fault trigger Variable if ground fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.Node1">
      <summary>Returns the first ALC node.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.Node2">
      <summary>Returns the second ALC node.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.Picture">
      <summary>Returns the name of the picture the element is located in.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ReverseSourceID">
      <summary>Returns the reverse Source ID if the edge is of type Trafo.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ShortFaultType">
      <summary>Returns the short fault detection type if the edge is of type Switch.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ShortFaultVarDisp">
      <summary>Returns the attached short fault display Variable if short fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ShortFaultVarFwd">
      <summary>Returns the attached short fault forward Variable if short fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ShortFaultVarRev">
      <summary>Returns the attached short fault reverse Variable if short fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.ShortFaultVarTrg">
      <summary>Returns the attached short fault trigger Variable if short fault detection is enabled.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.SourceID">
      <summary>Returns the Source ID if the edge is of type Source or Trafo.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.Type">
      <summary>Returns the type of this ALC edge.</summary>
    </member>
    <member name="P:zenOn.ALCEdge.Variable">
      <summary>Returns the attached Variable if the edge is of type Source or Switch.</summary>
    </member>
    <member name="T:zenOn.ALCEngine" />
    <member name="P:zenOn.ALCEngine.EdgeCount">
      <summary>Returns the number of ALC edges.</summary>
    </member>
    <member name="P:zenOn.ALCEngine.GraphAliasCount">
      <summary>Returns the number of ALC alias elements.</summary>
    </member>
    <member name="P:zenOn.ALCEngine.GraphElemCount">
      <summary>Returns the number of ALC elements.</summary>
    </member>
    <member name="P:zenOn.ALCEngine.GroundFaultMode">
      <summary>Get/Set the ground fault mode.</summary>
    </member>
    <member name="P:zenOn.ALCEngine.MaxOverload" />
    <member name="P:zenOn.ALCEngine.NodeCount">
      <summary>Returns the number of ALC nodes.</summary>
    </member>
    <member name="P:zenOn.ALCEngine.Parent">
      <summary>Returns the parent of the ALCEngine Object.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.AckGroundFault">
      <summary>Acknowledges a ground fault detection.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.AckShortFault">
      <summary>Acknowledges a short fault detection.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.EdgeItem">
      <summary>Returns the ALC edge at the given index.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.FindEdge">
      <summary>Returns the ALC edge associated to the given element.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.FindEdgeByRef">
      <summary>Returns the ALC edge associated to the given element.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.FindNode">
      <summary>Returns the ALC node associated to the given element.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.FindNodeByRef">
      <summary>Returns the ALC node associated to the given element.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.GraphAliasItem">
      <summary>Returns the ALC alias element at the given index.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.GraphElemItem">
      <summary>Returns the ALC element at the given index.</summary>
    </member>
    <member name="M:zenOn.ALCEngine.NodeItem">
      <summary>Returns the ALC node at the given index.</summary>
    </member>
    <member name="E:zenOn.ALCEngine.CheckInterlocking">
      <summary>Event: Is fired to check interlockings.</summary>
    </member>
    <member name="E:zenOn.ALCEngine.LoadFlowCalculated" />
    <member name="E:zenOn.ALCEngine.NMinus1Calculated" />
    <member name="E:zenOn.ALCEngine.Updated" />
    <member name="T:zenOn.ALCGraphAlias">
      <summary>Gets line and procedural elements via an index or from specific Screens and specific Element IDs.</summary>
    </member>
    <member name="P:zenOn.ALCGraphAlias.ElementID">
      <summary>Returns the ID of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCGraphAlias.ElementRef">
      <summary>Returns the reference name of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCGraphAlias.OriginalGraphElem">
      <summary>Returns the original ALC element.</summary>
    </member>
    <member name="P:zenOn.ALCGraphAlias.Picture">
      <summary>Returns the name of the picture the element is located in.</summary>
    </member>
    <member name="P:zenOn.ALCGraphAlias.Type">
      <summary>Returns the type of this ALC edge.</summary>
    </member>
    <member name="T:zenOn.ALCGraphElem">
      <summary>Gets line and procedural elements via an index or from specific Screens and specific Element IDs.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.ElementID">
      <summary>Returns the ID of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.ElementRef">
      <summary>Returns the reference name of the element the edge is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Length">
      <summary>Returns the length</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.LoadType">
      <summary>Returns the load type</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.LoadVal">
      <summary>Returns the fixed load value</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.MaxIType">
      <summary>Returns the maximal current type</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.MaxIVal">
      <summary>Returns the fixed maximal current</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Node1Count">
      <summary>Returns the number of elements connected to first node.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Node2Count">
      <summary>Returns the number of elements connected to second node.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Picture">
      <summary>Returns the name of the picture the element is located in.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.React">
      <summary>Returns the reactance</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Resist">
      <summary>Returns the resistance</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.ReverseSourceID">
      <summary>Returns the reverse Source ID if the edge is of type Trafo.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.SourceID">
      <summary>Returns the Source ID if the edge is of type Source or Trafo.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Type">
      <summary>Returns the type of this ALC edge.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarCalcI">
      <summary>Returns the variable for calculated current</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarCurI">
      <summary>Returns the variable for actual current</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarCurP">
      <summary>Returns the variable for actual power</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.Variable">
      <summary>Returns the attached Variable if the edge is of type Source or Switch.</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarLoad">
      <summary>Returns the variable for load value</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarMaxI">
      <summary>Returns the variable for maximal current</summary>
    </member>
    <member name="P:zenOn.ALCGraphElem.VarProtReact">
      <summary>Returns the variable for protection reactance</summary>
    </member>
    <member name="M:zenOn.ALCGraphElem.AlcDrainLoadType [GET]" />
    <member name="M:zenOn.ALCGraphElem.AlcLimitCurrentCarryingCapacityType [GET]" />
    <member name="M:zenOn.ALCGraphElem.Node1Item">
      <summary>Returns the the element connected to first node at the given index.</summary>
    </member>
    <member name="M:zenOn.ALCGraphElem.Node2Item">
      <summary>Returns the the element connected to second node at the given index.</summary>
    </member>
    <member name="T:zenOn.ALCNode">
      <summary>Gets informations about the line and procedural elements of a single node in your topology.</summary>
    </member>
    <member name="P:zenOn.ALCNode.EdgeCount">
      <summary>Returns the number of edges connected to this node.</summary>
    </member>
    <member name="P:zenOn.ALCNode.ElementIDs">
      <summary>Returns the IDs of the elements the Node is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCNode.ElementRefs">
      <summary>Returns the reference names of the elements the Node is connected with.</summary>
    </member>
    <member name="P:zenOn.ALCNode.LineStates">
      <summary>Returns the all line states at this node.</summary>
    </member>
    <member name="P:zenOn.ALCNode.LinkID">
      <summary>Returns the ID of the linked Source.</summary>
    </member>
    <member name="P:zenOn.ALCNode.Pictures">
      <summary>Returns the names of the pictures the Node is in.</summary>
    </member>
    <member name="M:zenOn.ALCNode.EdgeItem">
      <summary>Returns the ALC edge at the given index.</summary>
    </member>
    <member name="T:zenOn.Application">
      <summary>Includes the whole application of the control system</summary>
    </member>
    <member name="P:zenOn.Application.Computer">
      <summary>Returns the name of the computer on which the Runtime is running.</summary>
    </member>
    <member name="P:zenOn.Application.Enabled">
      <summary>Sets the visibility of the application main window.</summary>
    </member>
    <member name="P:zenOn.Application.Hide">
      <summary>This property returns/sets the visibility of the main window.</summary>
    </member>
    <member name="P:zenOn.Application.hWnd">
      <summary>Returns the handle of the main window of the application.</summary>
    </member>
    <member name="P:zenOn.Application.IsElementWizard">
      <summary>For internal use only</summary>
    </member>
    <member name="P:zenOn.Application.MyWorkspace">
      <summary>Returns the ZenWorkspace object (Editor Only).</summary>
    </member>
    <member name="P:zenOn.Application.Name">
      <summary>Returns the name of the application.</summary>
    </member>
    <member name="P:zenOn.Application.Path">
      <summary>Returns the path from which the application was started.</summary>
    </member>
    <member name="P:zenOn.Application.RunState">
      <summary>Returns the Application run state.</summary>
    </member>
    <member name="P:zenOn.Application.Version">
      <summary>Returns the version of the application.</summary>
    </member>
    <member name="P:zenOn.Application.VersionNumber">
      <summary>Returns the Application version.</summary>
    </member>
    <member name="P:zenOn.Application.WizardResult">
      <summary>For internal use only</summary>
    </member>
    <member name="M:zenOn.Application.Activate">
      <summary>Switches the main window of the application to the foreground.</summary>
    </member>
    <member name="M:zenOn.Application.Close">
      <summary>Closes the application.</summary>
    </member>
    <member name="M:zenOn.Application.DebugPrint">
      <summary>Sends a message to the output window of the editor.</summary>
    </member>
    <member name="M:zenOn.Application.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Application.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Application.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Application.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Application.License [GET]" />
    <member name="M:zenOn.Application.Projects">
      <summary>Returns the collection of projects loaded in the Runtime.</summary>
    </member>
    <member name="M:zenOn.Application.zenOnPath [GET]">
      <summary>Gets the absolute path of the specified directory.</summary>
    </member>
    <member name="E:zenOn.Application.OnClose">
      <summary>This event is fired when the application is about to be closed.</summary>
    </member>
    <member name="T:zenOn.Archive">
      <summary>Contains project information like the name, the source archive and other properties.</summary>
    </member>
    <member name="P:zenOn.Archive.Cycle">
      <summary>Reading in of the values is done cyclically by the system (days, hours, minutes and seconds)</summary>
    </member>
    <member name="P:zenOn.Archive.ID">
      <summary>Returns the unique ID of the current archive.</summary>
    </member>
    <member name="P:zenOn.Archive.Identifier">
      <summary>Returns the archive identifier.</summary>
    </member>
    <member name="P:zenOn.Archive.LongName">
      <summary>For internal use only</summary>
    </member>
    <member name="P:zenOn.Archive.Name">
      <summary>Returns the name of the current "Archive" object.</summary>
    </member>
    <member name="P:zenOn.Archive.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.Archive.Type" />
    <member name="M:zenOn.Archive.ArchiveFilters">
      <summary>Returns a collection ("ArchiveFilters" object) of all available filters.</summary>
    </member>
    <member name="M:zenOn.Archive.ArchiveRecordingType [GET]" />
    <member name="M:zenOn.Archive.ArchiveVariables">
      <summary>Returns a collection ("ArchiveVariables" object) with all assigned archive variables.</summary>
    </member>
    <member name="M:zenOn.Archive.BatchIndex [GET]">
      <summary>Returns the batchinformation of the archive.</summary>
    </member>
    <member name="M:zenOn.Archive.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Archive.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Archive.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Archive.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.ArchiveED">
      <summary>Contains project information like the name, the source archive and other properties.</summary>
    </member>
    <member name="P:zenOn.ArchiveED.Count" />
    <member name="P:zenOn.ArchiveED.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveED.AddVariable">
      <summary>Adds a new Variable to the collection.</summary>
    </member>
    <member name="M:zenOn.ArchiveED.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveED.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveED.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveED.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.ArchiveED.ImportArchiveTemplate" />
    <member name="M:zenOn.ArchiveED.ImportArvTemplate" />
    <member name="M:zenOn.ArchiveED.Item">
      <summary>Returns an "ArchiveVarED" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.ArchiveED.RemoveVariable">
      <summary>Removes an assigned "Variable" object from the collection.</summary>
    </member>
    <member name="T:zenOn.ArchiveFilter">
      <summary>Filters archive entries by a specified date / time and state.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.CountArchiveVariables">
      <summary>Returns the amount of "ArchiveVariable" objects within the collection.Returns the amount of "ArchiveVariable" objects within the collection.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.EndTime">
      <summary>Gets or sets the end time of the filter.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.Raster">
      <summary>Returns archive entries according to the set raster:3  means every third entry is returned.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.ReadOnlyVarsInFilter">
      <summary>Load only in the filter defined variables.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.StartTime">
      <summary>Gets or sets the start time of the filter as long.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilter.StatusBit" />
    <member name="P:zenOn.ArchiveFilter.StatusMask" />
    <member name="M:zenOn.ArchiveFilter.AddArchiveVariable">
      <summary>Adds an existing archive variable ("ArchiveVariable" object) to the filter.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.ApplyChanges">
      <summary>Apply changes on the filter.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.ArchiveFilterVariables">
      <summary>Returns an "ArchiveFilterVariables" object, containing a collection of all filtered archive variables.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.ArchiveFilterVariablesInfo">
      <summary>Return arrays with the information to all the defined variables in the filter.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.ArchiveFilterVariablesInfoEx">
      <summary>Return arrays with the information to all the defined variables in the filter. Works cross-project.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.ItemArchiveVariable">
      <summary>Returns an "ArchiveVariable" object (which was formerly added to the filter) from the collection.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.Query">
      <summary>Initiates the filtering of the data.Returns an "ArchiveFilterVariables" object, if data matched the filter query.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.QueryBlock">
      <summary>Initiates the filtering of the data.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.QueryBlockEx">
      <summary>Initiates the filtering of the data and also returns the project name and the utilized calculation modes in addition to the "QueryBlock" results.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilter.RemoveArchiveVariable">
      <summary>Removes an "ArchiveVariable" object (which was formerly added to the filter) from the filter.</summary>
    </member>
    <member name="T:zenOn.ArchiveFilters">
      <summary>This collection administers all filter objects</summary>
    </member>
    <member name="P:zenOn.ArchiveFilters.Count">
      <summary>The method returns the number of available objects</summary>
    </member>
    <member name="P:zenOn.ArchiveFilters.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveFilters.CreateArchiveFilter">
      <summary>creates a new "ArchiveFilter" object.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilters.DeleteArchiveFilter">
      <summary>Removes an existing filter ("ArchiveFilter" object) from the collection</summary>
    </member>
    <member name="M:zenOn.ArchiveFilters.Item">
      <summary>Returns an "ArchiveFilter" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.ArchiveFilterVariable">
      <summary>contains the filtered archive variable for the "ArchiveFilter" object.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilterVariable.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveFilterVariable.ArchiveValues" />
    <member name="M:zenOn.ArchiveFilterVariable.ArchiveValuesBlock">
      <summary>Returns an array of values for the actual ArchiveFilterVariable object.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilterVariable.ArchiveVariable">
      <summary>Returns an "ArchiveVarible" object, which constitutes the assigned archive variable.</summary>
    </member>
    <member name="T:zenOn.ArchiveFilterVariables">
      <summary>Returns an "ArchiveFilterVariables" object, containing a collection of the filtered archive variables.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilterVariables.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.ArchiveFilterVariables.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveFilterVariables.Item">
      <summary>Returns an "ArchiveFilterVariable" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilterVariables.ItemById">
      <summary>Returns an "ArchiveFilterVariable" object from the collection specified by its internal uniqe ID.</summary>
    </member>
    <member name="M:zenOn.ArchiveFilterVariables.ItemByIdEx">
      <summary>Returns an object of type ArchiveFilterVariable.</summary>
    </member>
    <member name="T:zenOn.Archives">
      <summary>The object is a collection of all existing archives.</summary>
    </member>
    <member name="P:zenOn.Archives.Count" />
    <member name="P:zenOn.Archives.Parent" />
    <member name="M:zenOn.Archives.Item">
      <summary>Returns an "Archive" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.ArchivesED">
      <summary>Manages the collection of "ArchiveED" objects.</summary>
    </member>
    <member name="P:zenOn.ArchivesED.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.ArchivesED.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchivesED.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.CreateArchive">
      <summary>Creates a new archive ("ArchiveED" object).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.DelArchive">
      <summary>Delete an existing archive ("ArchiveED" object) by its name.</summary>
    </member>
    <member name="M:zenOn.ArchivesED.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.ArchivesED.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.ArchivesED.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.ArchivesED.Item">
      <summary>Returns an "ArchiveED" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.ArchivesED.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.ArchivesED.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.ArchiveValue">
      <summary>The "ArchiveValue" object contains the value parameters for the "ArchiveFilterVariable" object.</summary>
    </member>
    <member name="P:zenOn.ArchiveValue.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.ArchiveValue.Status" />
    <member name="P:zenOn.ArchiveValue.StatusEx" />
    <member name="P:zenOn.ArchiveValue.Time">
      <summary>Gets or modifies the time when the value was recorded.</summary>
    </member>
    <member name="P:zenOn.ArchiveValue.TimeMilliSec">
      <summary>Gets or modifies the milliseconds, in addition to the time, when the value was recorded.</summary>
    </member>
    <member name="P:zenOn.ArchiveValue.Value">
      <summary>Gets or modifies the value that was recorded.</summary>
    </member>
    <member name="M:zenOn.ArchiveValue.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveValue.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveValue.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveValue.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.ArchiveValue.SetModified">
      <summary>Set this method, in order to adopt parameter modifications.</summary>
    </member>
    <member name="T:zenOn.ArchiveValues">
      <summary>Manages the "ArchiveValue" objects.</summary>
    </member>
    <member name="P:zenOn.ArchiveValues.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.ArchiveValues.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveValues.CreateArchiveValue">
      <summary>Creates a new "ArchiveValue" object.</summary>
    </member>
    <member name="M:zenOn.ArchiveValues.DeleteArchiveValue">
      <summary>Removes an existing archive value ("ArchiveValue" object) from the collection.</summary>
    </member>
    <member name="M:zenOn.ArchiveValues.Item">
      <summary>Returns an "ArchiveValue" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.ArchiveVarED">
      <summary>Contains the assigned "Variable" object and projecting information on the calculation mode.</summary>
    </member>
    <member name="M:zenOn.ArchiveVarED.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveVarED.DynProperties [PUT]" />
    <member name="M:zenOn.ArchiveVarED.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ArchiveVarED.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.ArchiveVariable" />
    <member name="P:zenOn.ArchiveVariable.Calculation" />
    <member name="P:zenOn.ArchiveVariable.ID">
      <summary>Returns the unique ID of the current "ArchiveVariable" object.</summary>
    </member>
    <member name="P:zenOn.ArchiveVariable.LongText">
      <summary>Returns the identifier of the current "ArchiveVariable" object.</summary>
    </member>
    <member name="P:zenOn.ArchiveVariable.Name">
      <summary>Returns the name of the current "ArchiveVariable" object.</summary>
    </member>
    <member name="P:zenOn.ArchiveVariable.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.ArchiveVariable.SourceVariable">
      <summary>Gets the SourceVariable As ArchiveVariable</summary>
    </member>
    <member name="P:zenOn.ArchiveVariable.Unit">
      <summary>Returns the unit (as string) of the current "ArchiveVariable" object.</summary>
    </member>
    <member name="M:zenOn.ArchiveVariable.Variable">
      <summary>Returns the assigned variable as "Variable" object.</summary>
    </member>
    <member name="T:zenOn.ArchiveVariables">
      <summary>The "ArchiveVariables" object is a collection of all defined "ArchiveVariable" objects.</summary>
    </member>
    <member name="P:zenOn.ArchiveVariables.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.ArchiveVariables.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="M:zenOn.ArchiveVariables.Item">
      <summary>Returns an "ArchiveVariable" object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.ArchiveVariables.ItemById">
      <summary>Returns an "ArchiveVariable" object from the collection specified by its internal uniqe ID, which is identified by the parameter vVariableId.</summary>
    </member>
    <member name="M:zenOn.ArchiveVariables.ItemByIdEx">
      <summary>Returns an object of type ArchiveFilterVariable.</summary>
    </member>
    <member name="T:zenOn.ArvTemplate" />
    <member name="M:zenOn.ArvTemplate.DynProperties [GET]" />
    <member name="M:zenOn.ArvTemplate.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.ArvTemplate.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.ArvTemplates" />
    <member name="P:zenOn.ArvTemplates.Count">
      <summary>Count of Archive Templates in the Collection</summary>
    </member>
    <member name="M:zenOn.ArvTemplates.Item">
      <summary>Returns the Archive Template by Name or Position</summary>
    </member>
    <member name="T:zenOn.BatchConfig " />
    <member name="P:zenOn.BatchConfig .Units">
      <summary>Returns the units configuration</summary>
    </member>
    <member name="M:zenOn.BatchConfig .CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .IsCheckedOut">
      <summary>Returns true when the current module is checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.BatchConfig .UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.BatchControlRecipe">
      <summary>Instance of a batch master recipe created for a single execution.</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ApprovedTime">
      <summary>Returns the approved time of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ApprovedUserId">
      <summary>Returns the approved user id of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ApprovedUserName">
      <summary>Returns the approved user name of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.CreatedTime">
      <summary>Returns the creation time of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.CreatedUserId">
      <summary>Returns the creation user id of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.CreatedUserName">
      <summary>Returns the creation user name of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.CRState">
      <summary>Returns the state the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.Description">
      <summary>Returns the description of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ExecutionMode">
      <summary>Returns the mode of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ExecutionState">
      <summary>Returns the state of the recipe engine</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.ID">
      <summary>Returns the Id of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.JobId">
      <summary>Returns the job id the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.JobVariable">
      <summary>Returns the job variable of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRDescription">
      <summary>Returns the description of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRId">
      <summary>Returns the Id of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRName">
      <summary>Returns the name of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRSourceVersion">
      <summary>Returns the version of the source master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRState">
      <summary>Returns the state of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.MRVersion">
      <summary>Returns the version of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.Name">
      <summary>Returns the name of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.OutdatedTime">
      <summary>Returns the outdated time of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.OutdatedUserId">
      <summary>Returns the outdated user id of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.OutdatedUserName">
      <summary>Returns the outdated user name of the master recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.StartedOnHost" />
    <member name="P:zenOn.BatchControlRecipe.StartedTime">
      <summary>Returns the started time of the control recipes</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.StartedUserId">
      <summary>Returns the started user id of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.StartedUserName">
      <summary>Returns the started user name of the control recipe</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipe.Type">
      <summary>Returns the type of the recipe</summary>
    </member>
    <member name="M:zenOn.BatchControlRecipe.SetNameAndDescription">
      <summary>Tries to rename the recipe and sets the description. Returns a result code whether the operation was successful or not.</summary>
    </member>
    <member name="T:zenOn.BatchControlRecipePhaseEditedEventData">
      <summary>The data class that gets passed when the ControlRecipePhaseEdited Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.Changes">
      <summary>Ids of the changed Tags</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.Comment">
      <summary>User Comment for the change</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.NewPhase">
      <summary>Phase after the change</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.OldPhase">
      <summary>Phase before the change</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipePhaseEditedEventData.User">
      <summary>Logged in user</summary>
    </member>
    <member name="T:zenOn.BatchControlRecipes">
      <summary>A collection of the batch control recipes.</summary>
    </member>
    <member name="P:zenOn.BatchControlRecipes.Count">
      <summary>Returns the count of items in the collection of control recipes</summary>
    </member>
    <member name="M:zenOn.BatchControlRecipes.Create">
      <summary>Creates a new control recipe. Returns the Id of the new Recipe or an empty Id if no recipe could be created.</summary>
    </member>
    <member name="M:zenOn.BatchControlRecipes.GetItem">
      <summary>Returns the control recipe item at the given index</summary>
    </member>
    <member name="M:zenOn.BatchControlRecipes.GetItemById">
      <summary>Returns the control recipe item with the specified Id</summary>
    </member>
    <member name="M:zenOn.BatchControlRecipes.GetItemByName">
      <summary>Returns the control recipe item with the specified name</summary>
    </member>
    <member name="T:zenOn.BatchControlStrategy">
      <summary>A control strategy used in batch phases.</summary>
    </member>
    <member name="P:zenOn.BatchControlStrategy.Description">
      <summary>Description of the control strategy</summary>
    </member>
    <member name="P:zenOn.BatchControlStrategy.Name">
      <summary>Name of the control strategy</summary>
    </member>
    <member name="P:zenOn.BatchControlStrategy.Number">
      <summary>Strategy number of the control strategy</summary>
    </member>
    <member name="T:zenOn.BatchCRSelectionChangedEventData">
      <summary>An object of this type is passed as a parameter in the CRSelectionChangedEvent.</summary>
    </member>
    <member name="P:zenOn.BatchCRSelectionChangedEventData.ScreenName">
      <summary>Name of the screen in which the selection of the recipe list was changed</summary>
    </member>
    <member name="T:zenOn.BatchManager">
      <summary>Used to get the template recipe collection.</summary>
    </member>
    <member name="P:zenOn.BatchManager.Config">
      <summary>Returns the Batch configuration</summary>
    </member>
    <member name="P:zenOn.BatchManager.Project" />
    <member name="M:zenOn.BatchManager.MasterRecipes">
      <summary>Returns the collection of MasterRecipes</summary>
    </member>
    <member name="M:zenOn.BatchManager.SelectedCRIds">
      <summary>Returns the Ids of the selected control recipes</summary>
    </member>
    <member name="M:zenOn.BatchManager.SelectedMRIds">
      <summary>Returns the Ids of the selected master recipes</summary>
    </member>
    <member name="E:zenOn.BatchManager.ControlRecipePhaseEdited">
      <summary>Event is fired when a phase in a control recipe gets edited</summary>
    </member>
    <member name="E:zenOn.BatchManager.CRSelectionChanged">
      <summary>Event is fired when the selection in a Control Recipe List is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.MRSelectionChanged">
      <summary>Event is fired when the selection in a Master Recipe List is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseCommunicationError">
      <summary>Event is fired when the communication error state of a phase is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseEscape">
      <summary>Event is fired when the escape state of a phase is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseExecutionError">
      <summary>Event is fired when an execution error occures in a phase (Timeouts, etc.)</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseModeChanged">
      <summary>Event is fired when the execution mode of a phase is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhasePlcError">
      <summary>Event is fired when the plc error state of a phase is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseProgress">
      <summary>Event is fired when there is a significant change to the internal State of a phase in during execution</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseRuntimeEvent">
      <summary>Event is fired when runtime events are triggered during the execution of a phase</summary>
    </member>
    <member name="E:zenOn.BatchManager.PhaseStateChanged">
      <summary>Event is fired when the execution state of a phase is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.RecipeModeChanged">
      <summary>Event is fired when the execution mode of a recipe is changed</summary>
    </member>
    <member name="E:zenOn.BatchManager.RecipeStateChanged">
      <summary>Event is fired when the execution state of a recipe is changed</summary>
    </member>
    <member name="T:zenOn.BatchMasterRecipe">
      <summary>Object with the properties for the recipe.</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ApprovedTime">
      <summary>Returns the approved time of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ApprovedUserId">
      <summary>Returns the approved user id of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ApprovedUserName">
      <summary>Returns the approved user name of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.Description">
      <summary>Returns the description of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ExecutionMode">
      <summary>Returns the mode of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ExecutionState">
      <summary>Returns the state of the recipe engine</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.ID">
      <summary>Returns the Id of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.MRState">
      <summary>Returns the state of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.Name">
      <summary>Returns the name of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.OutdatedTime">
      <summary>Returns the outdated time of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.OutdatedUserId">
      <summary>Returns the outdated user id of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.OutdatedUserName">
      <summary>Returns the outdated user name of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.SourceVersion">
      <summary>Returns the version of the source recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.StartedOnHost" />
    <member name="P:zenOn.BatchMasterRecipe.Type">
      <summary>Returns the type of the recipe</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipe.Version">
      <summary>Returns the version of recipe</summary>
    </member>
    <member name="M:zenOn.BatchMasterRecipe.ControlRecipes">
      <summary>Returns the collection of control recipes</summary>
    </member>
    <member name="M:zenOn.BatchMasterRecipe.SetNameAndDescription">
      <summary>Tries to rename the recipe and sets the description. Returns a result code whether the operation was successful or not.</summary>
    </member>
    <member name="T:zenOn.BatchMasterRecipes">
      <summary>Lists all template recipes.</summary>
    </member>
    <member name="P:zenOn.BatchMasterRecipes.Count">
      <summary>Returns the amount of items in the collection.</summary>
    </member>
    <member name="M:zenOn.BatchMasterRecipes.GetItem">
      <summary>Returns the master recipe item at the given index.</summary>
    </member>
    <member name="M:zenOn.BatchMasterRecipes.GetItemById">
      <summary>Returns the master recipe item with the specified Id</summary>
    </member>
    <member name="M:zenOn.BatchMasterRecipes.GetItemByName">
      <summary>Returns the master recipe item with the specified name</summary>
    </member>
    <member name="T:zenOn.BatchMRSelectionChangedEventData">
      <summary>Used as a parameter in the MRSelectionChangedEvent.</summary>
    </member>
    <member name="P:zenOn.BatchMRSelectionChangedEventData.ScreenName">
      <summary>Name of the screen in which the selection of the recipe list was changed</summary>
    </member>
    <member name="T:zenOn.BatchOperation">
      <summary>A sub-recipe, that can then be used in master recipes.</summary>
    </member>
    <member name="P:zenOn.BatchOperation.ChartId">
      <summary>Id of the chart operation object in the recipe</summary>
    </member>
    <member name="P:zenOn.BatchOperation.Description">
      <summary>Description of the operation</summary>
    </member>
    <member name="P:zenOn.BatchOperation.Name">
      <summary>Name of the operation</summary>
    </member>
    <member name="T:zenOn.BatchPhase">
      <summary>A functional block, that encapsulates the communication with the plc for a specific procedure.</summary>
    </member>
    <member name="P:zenOn.BatchPhase.ChartId">
      <summary>Id of the chart phase object in the recipe or operation</summary>
    </member>
    <member name="P:zenOn.BatchPhase.ControlStrategy">
      <summary>Currently active control strategy</summary>
    </member>
    <member name="P:zenOn.BatchPhase.Description">
      <summary>Description of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhase.ExecutionCounter">
      <summary>Execution counter of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhase.Name">
      <summary>Name of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhase.PhaseState">
      <summary>Execution state of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhase.Tags">
      <summary>Collection for the tags of the phase.</summary>
    </member>
    <member name="T:zenOn.BatchPhaseChanges">
      <summary>Object that contains the changes made in the phase.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseChanges.TagIdCount">
      <summary>Count of tag ids in the collection</summary>
    </member>
    <member name="M:zenOn.BatchPhaseChanges.TagIdByIndex">
      <summary>Gets a tag id from the collection by its index</summary>
    </member>
    <member name="T:zenOn.BatchPhaseCommunicationErrorEventData">
      <summary>The data class that gets passed when the PhaseCommunicationError Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.CommunicationErrorState">
      <summary>New state of the communication error</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseCommunicationErrorEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhaseConfig " />
    <member name="P:zenOn.BatchPhaseConfig .Description">
      <summary>Returns the phase description</summary>
    </member>
    <member name="P:zenOn.BatchPhaseConfig .ID">
      <summary>Returns the phase ID</summary>
    </member>
    <member name="P:zenOn.BatchPhaseConfig .Name">
      <summary>Returns the phase name</summary>
    </member>
    <member name="T:zenOn.BatchPhaseEscapeEventData">
      <summary>The data class that gets passed when the PhaseEscape Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.EscapeState">
      <summary>New internal execution position of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseEscapeEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhaseExecutionErrorEventData">
      <summary>The data class that gets passed when the PhaseExecutionError Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.ExecutionError">
      <summary>Type of the error that occured</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseExecutionErrorEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhaseModeChangedEventData">
      <summary>The data class that gets passed when the PhaseModeChanged Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.NewExecutionMode">
      <summary>Execution mode after the change</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.OldExecutionMode">
      <summary>Execution mode before the change</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseModeChangedEventData.User">
      <summary>Logged in user</summary>
    </member>
    <member name="T:zenOn.BatchPhasePlcErrorEventData">
      <summary>The data class that gets passed when the PhasePlcError Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.Phase">
      <summary>Phase for which the event was fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.PlcErrorState">
      <summary>New state of the PLC error</summary>
    </member>
    <member name="P:zenOn.BatchPhasePlcErrorEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhaseProgressEventData">
      <summary>The data class that gets passed when the PhaseProgress Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.PhaseState">
      <summary>New internal execution position of the phase</summary>
    </member>
    <member name="P:zenOn.BatchPhaseProgressEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhaseRuntimeEventData">
      <summary>The data class that gets passed when the PhaseRuntimeEvent Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.RuntimeEventType">
      <summary>Type of the Runtime event that occured</summary>
    </member>
    <member name="P:zenOn.BatchPhaseRuntimeEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="T:zenOn.BatchPhasesConfig " />
    <member name="P:zenOn.BatchPhasesConfig .Count">
      <summary>Returns the number of phases.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .DeleteById">
      <summary>Deletes a phase via ID.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .DeleteByIndex">
      <summary>Deletes a phase via index</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .DeleteByName">
      <summary>Deletes a phase via name.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .Export">
      <summary>Exports all phases to file.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .GetItem">
      <summary>Returns a phase via index.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .GetItemById">
      <summary>Returns a phase via ID.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .GetItemByName">
      <summary>Returns a phase via name.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .Import">
      <summary>Imports the phases from file.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .SingleExportById">
      <summary>Exports a phase via ID.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .SingleExportByIndex">
      <summary>Exports a phase via index.</summary>
    </member>
    <member name="M:zenOn.BatchPhasesConfig .SingleExportByName">
      <summary>Exports a phase via name.</summary>
    </member>
    <member name="T:zenOn.BatchPhaseStateChangedEventData">
      <summary>The data class that gets passed when the PhaseStateChanged Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.NewExecutionState">
      <summary>Execution state after the change</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.OldExecutionState">
      <summary>Execution state before the change</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.Operation">
      <summary>Operation that contains the phase that fired the event. null if the phase is in no operation</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.Phase">
      <summary>Phase for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchPhaseStateChangedEventData.User">
      <summary>Logged in user.</summary>
    </member>
    <member name="T:zenOn.BatchRecipeId">
      <summary>Contains the master recipe Id and the control recipe Id for a recipe.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeId.CRId">
      <summary>Control recipe Id of the recipe.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeId.MRId">
      <summary>Master recipe Id of the recipe.</summary>
    </member>
    <member name="T:zenOn.BatchRecipeModeChangedEventData">
      <summary>The data class that gets passed when the RecipeModeChanged Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.NewExecutionMode">
      <summary>Execution mode after the change.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.OldExecutionMode">
      <summary>Execution mode before the change.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeModeChangedEventData.User">
      <summary>Logged in user.</summary>
    </member>
    <member name="T:zenOn.BatchRecipeStateChangedEventData">
      <summary>The data class that gets passed when the RecipeStateChanged Event of the BatchManager is fired.</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.ControlRecipe">
      <summary>Control recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.MasterRecipe">
      <summary>Master recipe for which the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.NewExecutionState">
      <summary>Execution state after the change</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.OldExecutionState">
      <summary>Execution state before the change</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.Time">
      <summary>Time when the event was fired</summary>
    </member>
    <member name="P:zenOn.BatchRecipeStateChangedEventData.User">
      <summary>Logged in user</summary>
    </member>
    <member name="T:zenOn.BatchTag">
      <summary>Encapsulates a variable for the purposes of the batch execution.</summary>
    </member>
    <member name="P:zenOn.BatchTag.CurrentValue">
      <summary>Current value of the variable linked as the current value variable on the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.CurrentValueVariable">
      <summary>For command tags this is the variable that shows the current value for the tag on the PLC.</summary>
    </member>
    <member name="P:zenOn.BatchTag.DataType">
      <summary>Data type for the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.Description">
      <summary>Description of the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.ID">
      <summary>ID of the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.Name">
      <summary>Name of the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.TagType">
      <summary>Type of the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.TagValue">
      <summary>Value that is to be written on the tag variable</summary>
    </member>
    <member name="P:zenOn.BatchTag.TagVariable">
      <summary>Main Variable of the tag. For command tags the value is written onto this variable.</summary>
    </member>
    <member name="P:zenOn.BatchTag.TagVariableValue">
      <summary>Current value of the variable linked as the tag variable on the tag</summary>
    </member>
    <member name="P:zenOn.BatchTag.Unit">
      <summary>Unit of the tag</summary>
    </member>
    <member name="T:zenOn.BatchTags">
      <summary>A collection of tags.</summary>
    </member>
    <member name="P:zenOn.BatchTags.Count">
      <summary>Number of tags in the collection.</summary>
    </member>
    <member name="M:zenOn.BatchTags.GetItem">
      <summary>Gets a tag by its index in the collection.</summary>
    </member>
    <member name="M:zenOn.BatchTags.GetItemById">
      <summary>Gets a tag by its ID.</summary>
    </member>
    <member name="M:zenOn.BatchTags.GetItemByName">
      <summary>Gets a tag by its name.</summary>
    </member>
    <member name="T:zenOn.BatchTagValue">
      <summary>Value of a tag that is written to the variable of the tag.</summary>
    </member>
    <member name="P:zenOn.BatchTagValue.Bool">
      <summary>Bool value</summary>
    </member>
    <member name="P:zenOn.BatchTagValue.Duration">
      <summary>Duration value in seconds</summary>
    </member>
    <member name="P:zenOn.BatchTagValue.Numeric">
      <summary>Numerical value</summary>
    </member>
    <member name="P:zenOn.BatchTagValue.String">
      <summary>String value</summary>
    </member>
    <member name="T:zenOn.BatchUnitConfig " />
    <member name="P:zenOn.BatchUnitConfig .Description">
      <summary>Returns the unit description.</summary>
    </member>
    <member name="P:zenOn.BatchUnitConfig .ID">
      <summary>Returns the unit ID.</summary>
    </member>
    <member name="P:zenOn.BatchUnitConfig .Name">
      <summary>Returns the unit name.</summary>
    </member>
    <member name="P:zenOn.BatchUnitConfig .Phases">
      <summary>List of unit phases.</summary>
    </member>
    <member name="T:zenOn.BatchUnitsConfig " />
    <member name="P:zenOn.BatchUnitsConfig .Count">
      <summary>Returns the number of units.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .DeleteById">
      <summary>Deletes a unit via ID.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .DeleteByIndex">
      <summary>Deletes a unit via index.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .DeleteByName">
      <summary>Deletes a unit via name.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .Export">
      <summary>Exports all units to file.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .GetItem">
      <summary>Returns a unit via index.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .GetItemById">
      <summary>Returns a unit via ID.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .GetItemByName">
      <summary>Returns a unit via name.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .Import">
      <summary>Imports the units from file.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .SingleExportById">
      <summary>Exports a unit via ID.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .SingleExportByIndex">
      <summary>Exports a unit via index.</summary>
    </member>
    <member name="M:zenOn.BatchUnitsConfig .SingleExportByName">
      <summary>Exports a unit via name.</summary>
    </member>
    <member name="T:zenOn.Cel">
      <summary>Represents the "Chronological Event List" an offers the feature to write user defined Events into the list or react on entries in the list.</summary>
    </member>
    <member name="P:zenOn.Cel.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Cel.CelItems">
      <summary>Return the CelItems</summary>
    </member>
    <member name="M:zenOn.Cel.CelItemsAsXml">
      <summary>Return the CelItems as XML</summary>
    </member>
    <member name="M:zenOn.Cel.DynProperties [GET]" />
    <member name="M:zenOn.Cel.DynProperties [PUT]" />
    <member name="M:zenOn.Cel.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Cel.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.Cel.OnlineCelCollection [GET]">
      <summary>Returns the OnlineCels object.</summary>
    </member>
    <member name="M:zenOn.Cel.ResetQueryFilter">
      <summary>Resets the QueryFilter</summary>
    </member>
    <member name="M:zenOn.Cel.WriteCelString">
      <summary>Creates a new cel-item (only runtime)</summary>
    </member>
    <member name="M:zenOn.Cel.WriteCelStringEx">
      <summary>Creates a new extended cel-item (only runtime)</summary>
    </member>
    <member name="M:zenOn.Cel.WriteCelStringTimestamp">
      <summary>Creates a new extended cel-item including timestamp (Runtime only)</summary>
    </member>
    <member name="E:zenOn.Cel.CelItemAdded">
      <summary>Event is fired when a new entry has been added to the CEL</summary>
    </member>
    <member name="E:zenOn.Cel.CelItemCommentChanged" />
    <member name="E:zenOn.Cel.CelListSelectionChanged">
      <summary>Fired whenever the Selection in the list is changed.</summary>
    </member>
    <member name="E:zenOn.Cel.SelectionChangedEx">
      <summary>Event: selection array in the event list has been changed...</summary>
    </member>
    <member name="T:zenOn.CelItem">
      <summary>Provides all information stored with the cel item.</summary>
    </member>
    <member name="P:zenOn.CelItem.Class">
      <summary>Returns the class</summary>
    </member>
    <member name="P:zenOn.CelItem.Comment">
      <summary>Returns the comment</summary>
    </member>
    <member name="P:zenOn.CelItem.Computer">
      <summary>Returns the computer name</summary>
    </member>
    <member name="P:zenOn.CelItem.Group">
      <summary>Returns the group</summary>
    </member>
    <member name="P:zenOn.CelItem.Status">
      <summary>Returns the status.</summary>
    </member>
    <member name="P:zenOn.CelItem.Tagname">
      <summary>Returns the tag name of the variable.</summary>
    </member>
    <member name="P:zenOn.CelItem.Text">
      <summary>Returns the text</summary>
    </member>
    <member name="P:zenOn.CelItem.Time">
      <summary>Returns the time</summary>
    </member>
    <member name="P:zenOn.CelItem.User">
      <summary>Returns the user</summary>
    </member>
    <member name="P:zenOn.CelItem.Value">
      <summary>Returns the value</summary>
    </member>
    <member name="P:zenOn.CelItem.VariableName">
      <summary>Returns the name of the variable</summary>
    </member>
    <member name="M:zenOn.CelItem.GetFieldData" />
    <member name="T:zenOn.CelItems">
      <summary>Gets all CEL entries stored in memory.</summary>
    </member>
    <member name="P:zenOn.CelItems.Count">
      <summary>Returns the amount of CelItems</summary>
    </member>
    <member name="P:zenOn.CelItems.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.CelItems.Item">
      <summary>Returns the CelItem at the given index.</summary>
    </member>
    <member name="T:zenOn.ColorPalettes" />
    <member name="P:zenOn.ColorPalettes.Count">
      <summary>Returns the number of color palettes.</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.CreateDynProperty" />
    <member name="M:zenOn.ColorPalettes.DynProperties [GET]" />
    <member name="M:zenOn.ColorPalettes.DynProperties [PUT]" />
    <member name="M:zenOn.ColorPalettes.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.ColorPalettes.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.Export">
      <summary>Exports the selected object to a XML file.</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.GetActivePaletteIndex">
      <summary>Returns the index of the currently active color palette.</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.GetPaletteColor">
      <summary>Determines the value of the color of a color palette.</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.ColorPalettes.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="E:zenOn.ColorPalettes.ColorPaletteSwitched">
      <summary>This event is fired when the active color palette has been switched.</summary>
    </member>
    <member name="T:zenOn.ComplexItem">
      <summary>Represents the items of a structure datatype.</summary>
    </member>
    <member name="P:zenOn.ComplexItem.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="M:zenOn.ComplexItem.DynProperties [GET]" />
    <member name="M:zenOn.ComplexItem.DynProperties [PUT]" />
    <member name="M:zenOn.ComplexItem.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.ComplexItem.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.ComplexItem.MoveItemDown">
      <summary>Move the ComplexItem one down in the Tree.</summary>
    </member>
    <member name="M:zenOn.ComplexItem.MoveItemUp">
      <summary>Move the ComplexItem one up in the Tree.</summary>
    </member>
    <member name="T:zenOn.Driver">
      <summary>The object Driver includes important information on the defined drivers.</summary>
    </member>
    <member name="P:zenOn.Driver.Identification">
      <summary>Name</summary>
    </member>
    <member name="P:zenOn.Driver.Name">
      <summary>Returns the name (EXE) of the driver.</summary>
    </member>
    <member name="P:zenOn.Driver.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Driver.Browse">
      <summary>Imports variables from PLC or file.</summary>
    </member>
    <member name="M:zenOn.Driver.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.CloseConfig">
      <summary>Closes driver config and stops driver.</summary>
    </member>
    <member name="M:zenOn.Driver.CreateDynProperty" />
    <member name="M:zenOn.Driver.DynProperties [GET]" />
    <member name="M:zenOn.Driver.DynProperties [PUT]" />
    <member name="M:zenOn.Driver.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Driver.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.Driver.Export" />
    <member name="M:zenOn.Driver.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.Import" />
    <member name="M:zenOn.Driver.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Driver.OpenConfig">
      <summary>Starts driver and opens driver config for access via properties.</summary>
    </member>
    <member name="M:zenOn.Driver.SupportsChannel">
      <summary>Returns True when the given channeltype is supported for the given datatype.</summary>
    </member>
    <member name="M:zenOn.Driver.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.Drivers">
      <summary>A collection which contains the defined drivers of the project.</summary>
    </member>
    <member name="P:zenOn.Drivers.Count">
      <summary>Count of defined drivers</summary>
    </member>
    <member name="P:zenOn.Drivers.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Drivers.CreateDriver">
      <summary>Creates a new driver</summary>
    </member>
    <member name="M:zenOn.Drivers.CreateDriverEx">
      <summary>Creates a new driver</summary>
    </member>
    <member name="M:zenOn.Drivers.DeleteDriver">
      <summary>Deletes the given driver</summary>
    </member>
    <member name="M:zenOn.Drivers.Item">
      <summary>Returns driver by position or name</summary>
    </member>
    <member name="M:zenOn.Drivers.ShowCreateDialog">
      <summary>Opens the zenon standard dialog "Create driver".</summary>
    </member>
    <member name="T:zenOn.DynPicture">
      <summary>A Collection of screens.</summary>
    </member>
    <member name="P:zenOn.DynPicture.AutoKBLayout">
      <summary>Use regional settings for keyboard layout</summary>
    </member>
    <member name="P:zenOn.DynPicture.BackColor" />
    <member name="P:zenOn.DynPicture.BackgroundGraphicAlignment" />
    <member name="P:zenOn.DynPicture.BackgroundImage">
      <summary>Background image for the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.BackgroundImageStyle">
      <summary>Style for the background image.</summary>
    </member>
    <member name="P:zenOn.DynPicture.Bottom">
      <summary>Bottom-coordinate of the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.Description">
      <summary>Metadata tag which is in place to hold any description text.</summary>
    </member>
    <member name="P:zenOn.DynPicture.DynPictureContainer">
      <summary>Returns the container element in which the DynPicture is contained, or NULL when the DynPicture is not inside a container. (RT-Only)</summary>
    </member>
    <member name="P:zenOn.DynPicture.Enable">
      <summary>This property de/activates the current picture.</summary>
    </member>
    <member name="P:zenOn.DynPicture.EndFunction">
      <summary>Rt-Function by closing the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.Height">
      <summary>Height of the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.Hide">
      <summary>Sets the visibility of the picture.</summary>
    </member>
    <member name="P:zenOn.DynPicture.InstanceId">
      <summary>Returns the template instance ID of the DynPicture. (RT-Only)</summary>
    </member>
    <member name="P:zenOn.DynPicture.Instances">
      <summary>Returns a collection containing all instances of the DynPicture. (RT-Only)</summary>
    </member>
    <member name="P:zenOn.DynPicture.Left">
      <summary>Left-coordinate of the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.MonitorId">
      <summary>Returns the ID of the Monitor on which the picture is opened. (RT-Only)</summary>
    </member>
    <member name="P:zenOn.DynPicture.Name">
      <summary>The unique name of the current picture.</summary>
    </member>
    <member name="P:zenOn.DynPicture.Online">
      <summary>Checks, if the current picture is open.</summary>
    </member>
    <member name="P:zenOn.DynPicture.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.DynPicture.PictureFilter">
      <summary>Returns the current picture filter. (RT-Only)</summary>
    </member>
    <member name="P:zenOn.DynPicture.Right">
      <summary>Right-coordinate of the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.ShowInCE">
      <summary>Use picture in CE-projects</summary>
    </member>
    <member name="P:zenOn.DynPicture.ShowModal">
      <summary>Show picture as modal dialog</summary>
    </member>
    <member name="P:zenOn.DynPicture.StartFunction">
      <summary>Rt-Function by showing the picture</summary>
    </member>
    <member name="P:zenOn.DynPicture.Template" />
    <member name="P:zenOn.DynPicture.Top">
      <summary>Top-coordinate of the picture.</summary>
    </member>
    <member name="P:zenOn.DynPicture.Type" />
    <member name="P:zenOn.DynPicture.UseTemplateSize">
      <summary>Use size-properties of the linked template.</summary>
    </member>
    <member name="P:zenOn.DynPicture.Width">
      <summary>Width of the picture.</summary>
    </member>
    <member name="P:zenOn.DynPicture.ZoomLevel">
      <summary>Zoom level of a world picture (RT-Only)</summary>
    </member>
    <member name="M:zenOn.DynPicture.Activate">
      <summary>Activates the picture (only runtime)</summary>
    </member>
    <member name="M:zenOn.DynPicture.BringToTop">
      <summary>Brings picture to top of Z-order</summary>
    </member>
    <member name="M:zenOn.DynPicture.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.CloseDynPicture">
      <summary>Closes the Screen when its currently opened (RT-Only)</summary>
    </member>
    <member name="M:zenOn.DynPicture.Copy">
      <summary>Copies the picture</summary>
    </member>
    <member name="M:zenOn.DynPicture.CreateMdiDefaultElements">
      <summary>Create the MDI-Default elements (only with MDI-Windows)</summary>
    </member>
    <member name="M:zenOn.DynPicture.CreateMDIScreenTemplate" />
    <member name="M:zenOn.DynPicture.CreateScreenTemplate" />
    <member name="M:zenOn.DynPicture.DeselectElements">
      <summary>Deselects all currently selected Elements</summary>
    </member>
    <member name="M:zenOn.DynPicture.DynProperties [GET]" />
    <member name="M:zenOn.DynPicture.DynProperties [PUT]" />
    <member name="M:zenOn.DynPicture.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.DynPicture.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.DynPicture.Elements">
      <summary>Returns the Elements-list</summary>
    </member>
    <member name="M:zenOn.DynPicture.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.Hardcopy">
      <summary>Creates a Bitmap of the picture, with the appearance as shown in the editor.</summary>
    </member>
    <member name="M:zenOn.DynPicture.ImportMdiElements">
      <summary>Imports the MDI-Default elements from a template (only with MDI-Windows)</summary>
    </member>
    <member name="M:zenOn.DynPicture.ImportMdiTemplateItems" />
    <member name="M:zenOn.DynPicture.InsertSymbol">
      <summary>Insert a symbol from the symbol-library</summary>
    </member>
    <member name="M:zenOn.DynPicture.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.MdiElements">
      <summary>Returns the list of the available MDI-controls</summary>
    </member>
    <member name="M:zenOn.DynPicture.Move">
      <summary>Updates the position of a DynPicture object.</summary>
    </member>
    <member name="M:zenOn.DynPicture.Save">
      <summary>Method to save the picture (changes in this collection)</summary>
    </member>
    <member name="M:zenOn.DynPicture.SelElements">
      <summary>Returns a collection of the currently selected elements.</summary>
    </member>
    <member name="M:zenOn.DynPicture.SetZoomAndPos">
      <summary>Sets zoom factors and position of a world picture (RT-Only)</summary>
    </member>
    <member name="M:zenOn.DynPicture.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.DynPicture.Update">
      <summary>Redraws a certain area of the picture.</summary>
    </member>
    <member name="M:zenOn.DynPicture.UpdateAll">
      <summary>Update the picture</summary>
    </member>
    <member name="E:zenOn.DynPicture.Close">
      <summary>Event is fired by closing the picture</summary>
    </member>
    <member name="E:zenOn.DynPicture.Open">
      <summary>Event is fired by opening the picture</summary>
    </member>
    <member name="E:zenOn.DynPicture.Timer">
      <summary>This event is executed in a cyclic interval – depending on the flash frequency set in the project.</summary>
    </member>
    <member name="T:zenOn.DynPictureInstances">
      <summary>Used to check if a screen is displayed in the runtime.</summary>
    </member>
    <member name="P:zenOn.DynPictureInstances.Count">
      <summary>Returns the amount of instances of the given DynPicture object. (RT-Only)</summary>
    </member>
    <member name="M:zenOn.DynPictureInstances.Item">
      <summary>Returns instances at the given index. (RT-Only)</summary>
    </member>
    <member name="T:zenOn.DynPictures">
      <summary>This collection contains the defined Screens.</summary>
    </member>
    <member name="P:zenOn.DynPictures.Count">
      <summary>Returns number of the elements</summary>
    </member>
    <member name="P:zenOn.DynPictures.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="M:zenOn.DynPictures.AddMarker">
      <summary>Adds a marker into a screen</summary>
    </member>
    <member name="M:zenOn.DynPictures.Create">
      <summary>Creates and returns a new Object.</summary>
    </member>
    <member name="M:zenOn.DynPictures.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.DynPictures.DelMarker">
      <summary>Deletes a marker from a screen</summary>
    </member>
    <member name="M:zenOn.DynPictures.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.DynPictures.GetCurrentEditorScreen">
      <summary>Returns the currently active screen in the editor</summary>
    </member>
    <member name="M:zenOn.DynPictures.GetPointerInfo">
      <summary>Gets the information for the specified pointer associated with the current message.</summary>
    </member>
    <member name="M:zenOn.DynPictures.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.DynPictures.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.DynPictures.ItemOnMonitor">
      <summary>Returns a screen with given name on the given monitor.(RT-Only)</summary>
    </member>
    <member name="M:zenOn.DynPictures.SetupTouchInertia">
      <summary>Setup inertia settings for multitouch manipulation</summary>
    </member>
    <member name="M:zenOn.DynPictures.ShowCreateDialog">
      <summary>Opens the zenon standard dialog "New screen".</summary>
    </member>
    <member name="M:zenOn.DynPictures.SingleExport">
      <summary>Exports the Item with given Name oder Index.</summary>
    </member>
    <member name="E:zenOn.DynPictures.Close">
      <summary>Event is fired when a screen is closed.</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementGesture">
      <summary>Defines the output of the Interaction Context object.</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementInit">
      <summary>Event is fired when an element is initialized.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementLeftButtonDblClick">
      <summary>Event is fired when an element is double clicked with the left mouse button.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementLeftButtonDown">
      <summary>Event is fired when the left mouse button is pushed down on an element.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementLeftButtonUp">
      <summary>Event is fired when the right mouse button is released on an element.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementMouseOver">
      <summary>Event is fired when the mouse is moved over an element.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementRightButtonDblClk">
      <summary>Event is fired when an element is double clicked with the right mouse button.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementRightButtonDown">
      <summary>Event is fired when the right mouse button is pushed down on an element.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.ElementRightButtonUp">
      <summary>Event is fired when the right mouse button is released on an element.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.NCPointerDown">
      <summary>Posted when a pointer makes contact over the non-client area of a window.</summary>
    </member>
    <member name="E:zenOn.DynPictures.NCPointerUp">
      <summary>Posted when a pointer that made contact over the non-client area of a window breaks contact.</summary>
    </member>
    <member name="E:zenOn.DynPictures.NCPointerUpdate">
      <summary>Posted to provide an update on a pointer that made contact over the non-client area of a window or when a hovering uncaptured contact moves over the non-client area of a window.</summary>
    </member>
    <member name="E:zenOn.DynPictures.Open">
      <summary>Event is fired when a screen is opened.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PictureGesture">
      <summary>Defines the output of the Interaction Context object.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerActivate" />
    <member name="E:zenOn.DynPictures.PointerCaptureChanged">
      <summary>Sent to a window that is losing capture of an input pointer.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerDown">
      <summary>Posted when a pointer makes contact over the client area of a window.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerEnter">
      <summary>Sent to a window when a new pointer enters detection range over the window (hover) or when an existing pointer moves within the boundaries of the window.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerHWheel">
      <summary>Posted to the window with foreground keyboard focus when a horizontal scroll wheel is rotated.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerLeave">
      <summary>Sent to a window when a pointer leaves detection range over the window (hover) or when a pointer moves outside the boundaries of the window.</summary>
    </member>
    <member name="E:zenOn.DynPictures.PointerUp" />
    <member name="E:zenOn.DynPictures.PointerUpdate" />
    <member name="E:zenOn.DynPictures.PointerWheel">
      <summary>Posted to the window with foreground keyboard focus when a horizontal scroll wheel is rotated.</summary>
    </member>
    <member name="E:zenOn.DynPictures.TouchEvent">
      <summary>Event is fired for all touch events.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.TouchManipulationCompleteEvent">
      <summary>Event is fired when a touch manipulation ends.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.TouchManipulationDeltaEvent">
      <summary>Event is fired when a touch manipulation is in progress.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.TouchManipulationStartEvent">
      <summary>Event is fired when a touch manipulation starts.(RT-Only)</summary>
    </member>
    <member name="E:zenOn.DynPictures.WindowPosChanged">
      <summary>Event is fired when a screen is moved or resized.(RT-Only)</summary>
    </member>
    <member name="T:zenOn.EdLimit">
      <summary>Represents the limits from the variables as well as from the datatypes.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Active">
      <summary>Limit in/-active</summary>
    </member>
    <member name="P:zenOn.EdLimit.Alarm">
      <summary>Should the Limit raise an Alarm.</summary>
    </member>
    <member name="P:zenOn.EdLimit.AlarmAck">
      <summary>The Alarm has to be acknowledged by the user whe n this flag is set to true.</summary>
    </member>
    <member name="P:zenOn.EdLimit.AlarmCause" />
    <member name="P:zenOn.EdLimit.AlarmComment" />
    <member name="P:zenOn.EdLimit.AlarmDelete">
      <summary>The Alarm has to be deleted by the user when this flag is set to true.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Blinking">
      <summary>Blinking will be enabled if this flag is set to true.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Cel">
      <summary>Write into CEL.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Class">
      <summary>Class of this Limit.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Color">
      <summary>Color of this Limit.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Delay">
      <summary>Delay of this Limit in seconds.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Group">
      <summary>Group number of this Limit.</summary>
    </member>
    <member name="P:zenOn.EdLimit.HelpCapture">
      <summary>Represents the HelpCapture if you use the embedded help features of zenOn.</summary>
    </member>
    <member name="P:zenOn.EdLimit.HelpFile">
      <summary>Represents the HelpFile if you use the embedded help features of zenOn.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Invisible">
      <summary>Invisible Flag can be used with the 'Status' element for example.</summary>
    </member>
    <member name="P:zenOn.EdLimit.IsMax">
      <summary>MIN or MAXLimit will be reached on underrun the limit or on overflow the setting.</summary>
    </member>
    <member name="P:zenOn.EdLimit.IsSimple">
      <summary>This method returns -1 when the datatype is a simple datatype and 0 when it is a complex datatype.</summary>
    </member>
    <member name="P:zenOn.EdLimit.IsVariable">
      <summary>The limit value is not defined through a fixed technical assignment of value, but through the technical value of another variable.A 'Variable' has to be linked also with this limit.</summary>
    </member>
    <member name="P:zenOn.EdLimit.LimitValue">
      <summary>Value when the Limit is reached.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.EdLimit.ParentID">
      <summary>ID of the variable</summary>
    </member>
    <member name="P:zenOn.EdLimit.Print">
      <summary>Alarm or limit violation (with set option "in CEL") is printed online.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Text">
      <summary>Text of the limit as it is displayed in lists, in the status line, and in dynamic elements on a limit violation.</summary>
    </member>
    <member name="P:zenOn.EdLimit.ThresholdValue">
      <summary>Is used for the releasing of the limit violation.</summary>
    </member>
    <member name="P:zenOn.EdLimit.Variable">
      <summary>Variable as object, which should be used as dynamic limit value.Only available, if the dynamic limit is active!</summary>
    </member>
    <member name="M:zenOn.EdLimit.DynProperties [GET]" />
    <member name="M:zenOn.EdLimit.DynProperties [PUT]" />
    <member name="M:zenOn.EdLimit.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.EdLimit.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="T:zenOn.Element">
      <summary>Contains the most important information on a defined dynamic element, e.g. type, position, colour, ...</summary>
    </member>
    <member name="P:zenOn.Element.BackColor">
      <summary>Background-Color.</summary>
    </member>
    <member name="P:zenOn.Element.BackColorVariable">
      <summary>Name (as string) of the variable, whose limit colors should influence the background/filling color of the element.</summary>
    </member>
    <member name="P:zenOn.Element.Bottom">
      <summary>Returns the position of the bottom window border of the dynamic element in pixel.</summary>
    </member>
    <member name="P:zenOn.Element.CountVariable">
      <summary>Number of linked variables</summary>
    </member>
    <member name="P:zenOn.Element.Elements">
      <summary>Returns the list of linked symbols</summary>
    </member>
    <member name="P:zenOn.Element.Enable">
      <summary>De/-Activates the element (only runtime)</summary>
    </member>
    <member name="P:zenOn.Element.Focus">
      <summary>Sets the focus to the element</summary>
    </member>
    <member name="P:zenOn.Element.ForeColor">
      <summary>Text-Color</summary>
    </member>
    <member name="P:zenOn.Element.Function">
      <summary>Returns the linked Function.</summary>
    </member>
    <member name="P:zenOn.Element.Height">
      <summary>Height of the element</summary>
    </member>
    <member name="P:zenOn.Element.HelpCapture">
      <summary>Help-Index in the helpfile for context-sensitive help</summary>
    </member>
    <member name="P:zenOn.Element.HelpFile">
      <summary>Name of the linked helpfile</summary>
    </member>
    <member name="P:zenOn.Element.Hide">
      <summary>Show/Hide the element (only runtime)</summary>
    </member>
    <member name="P:zenOn.Element.HorizontalOrigin" />
    <member name="P:zenOn.Element.HotKey">
      <summary>Hotkey for the element</summary>
    </member>
    <member name="P:zenOn.Element.hWnd">
      <summary>Handle for picture</summary>
    </member>
    <member name="P:zenOn.Element.ID">
      <summary>ID of the element (unique)</summary>
    </member>
    <member name="P:zenOn.Element.Interlocking">
      <summary>Returns the linked Interlocking.</summary>
    </member>
    <member name="P:zenOn.Element.InterlockingStatus">
      <summary>Returns whether the Element is currently interlocked.</summary>
    </member>
    <member name="P:zenOn.Element.Left">
      <summary>Left-coordinate of the element</summary>
    </member>
    <member name="P:zenOn.Element.LineColorVariable">
      <summary>Name (as string) of the variable, whose limit colors should influence the line/text color of the element.</summary>
    </member>
    <member name="P:zenOn.Element.MenuName">
      <summary>Name of the linked Menu</summary>
    </member>
    <member name="P:zenOn.Element.Name">
      <summary>Name of the element (optional)</summary>
    </member>
    <member name="P:zenOn.Element.Parent">
      <summary>Parent-Object of the element</summary>
    </member>
    <member name="P:zenOn.Element.PasswordLevel">
      <summary>Password-Level for user-action</summary>
    </member>
    <member name="P:zenOn.Element.Right">
      <summary>Returns the position of the right window border of the dynamic element in pixel.</summary>
    </member>
    <member name="P:zenOn.Element.SelectionFeedbackVariable">
      <summary>Returns the variable for the Selection Feedback.</summary>
    </member>
    <member name="P:zenOn.Element.StationName">
      <summary>Element is entered into the object list of the world view with the text defined with this property as string.</summary>
    </member>
    <member name="P:zenOn.Element.SymbolInLibrary">
      <summary>Insert the given symbol into the symbol-library</summary>
    </member>
    <member name="P:zenOn.Element.SymbolNo">
      <summary>Number of symbol within the picture.</summary>
    </member>
    <member name="P:zenOn.Element.ToolTip">
      <summary>Info-Text for the element (is shown by mouseover in the runtime)</summary>
    </member>
    <member name="P:zenOn.Element.Top">
      <summary>Top-coordinate of the element</summary>
    </member>
    <member name="P:zenOn.Element.TwistVariable">
      <summary>Name of the variable for rotating the element as string.</summary>
    </member>
    <member name="P:zenOn.Element.TwistVarMax">
      <summary>Highest variable value for rotating the element.</summary>
    </member>
    <member name="P:zenOn.Element.TwistVarMin">
      <summary>Lowest variable value for rotating the element.</summary>
    </member>
    <member name="P:zenOn.Element.TwistViewMax">
      <summary>Rotation angle of the element for variable maximum.</summary>
    </member>
    <member name="P:zenOn.Element.TwistViewMin">
      <summary>Rotation angle of the element for variable minimum.</summary>
    </member>
    <member name="P:zenOn.Element.Type">
      <summary>Type of the element ()</summary>
    </member>
    <member name="P:zenOn.Element.VerticalOrigin" />
    <member name="P:zenOn.Element.VisibilityFrom">
      <summary>Minimum value of the variable for visibility of the element</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityFromLimit">
      <summary>Returns true if visibility is adopted from the limit value of the variable</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityInterlocking">
      <summary>Returns the interlocking object for visibility</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityTo">
      <summary>Maximum value of the variable for visibility of the element</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityType">
      <summary>Returns the visibility type</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityVariable">
      <summary>Returns the variable for visibility</summary>
    </member>
    <member name="P:zenOn.Element.VisibilityWhenInterlocked">
      <summary>Returns true if visible when interlocked</summary>
    </member>
    <member name="P:zenOn.Element.Width">
      <summary>Width of the element</summary>
    </member>
    <member name="P:zenOn.Element.XVariable">
      <summary>Name of the variable for horizontal moving of the element as string.</summary>
    </member>
    <member name="P:zenOn.Element.XVarMax">
      <summary>Highest variable value for horizontal moving of the element.</summary>
    </member>
    <member name="P:zenOn.Element.XVarMin">
      <summary>Lowest variable value for horizontal moving of the element.</summary>
    </member>
    <member name="P:zenOn.Element.XViewMax">
      <summary>Horizontal position of the element for variable maximum (in pixels).</summary>
    </member>
    <member name="P:zenOn.Element.XViewMin">
      <summary>Horizontal position of the element for variable minimum (in pixels).</summary>
    </member>
    <member name="P:zenOn.Element.XZoomVariable">
      <summary>Name of the variable for zooming the width of the element as string.</summary>
    </member>
    <member name="P:zenOn.Element.XZoomVarMax">
      <summary>Highest variable value for zooming the width of the element.</summary>
    </member>
    <member name="P:zenOn.Element.XZoomVarMin">
      <summary>Lowest variable value for zooming the width of the element.</summary>
    </member>
    <member name="P:zenOn.Element.XZoomViewMax">
      <summary>Zoom factor of the width of the element for variable maximum (in %).</summary>
    </member>
    <member name="P:zenOn.Element.XZoomViewMin">
      <summary>Zoom factor of the width of the element for variable minimum (in %).</summary>
    </member>
    <member name="P:zenOn.Element.YVariable">
      <summary>Name of the variable for vertical moving of the element as string.</summary>
    </member>
    <member name="P:zenOn.Element.YVarMax">
      <summary>Highest variable value for vertical moving of the element.</summary>
    </member>
    <member name="P:zenOn.Element.YVarMin">
      <summary>Lowest variable value for vertical moving of the element.</summary>
    </member>
    <member name="P:zenOn.Element.YViewMax">
      <summary>Vertical position of the element for variable maximum (in pixels).</summary>
    </member>
    <member name="P:zenOn.Element.YViewMin">
      <summary>Vertical position of the element for variable minimum (in pixels).</summary>
    </member>
    <member name="P:zenOn.Element.YZoomVariable">
      <summary>Name of the variable for zooming the height of the element as string.</summary>
    </member>
    <member name="P:zenOn.Element.YZoomVarMax">
      <summary>Highest variable value for zooming the height of the element.</summary>
    </member>
    <member name="P:zenOn.Element.YZoomVarMin">
      <summary>Lowest variable value for zooming the height of the element.</summary>
    </member>
    <member name="P:zenOn.Element.YZoomViewMax">
      <summary>Zoom factor of the height of the element for variable maximum (in %).</summary>
    </member>
    <member name="P:zenOn.Element.YZoomViewMin">
      <summary>Zoom factor of the height of the element for variable minimum (in %).</summary>
    </member>
    <member name="P:zenOn.Element.ZoomMax">
      <summary>Highest zoom step in which the element should be visible in the worldview. Default: -1.</summary>
    </member>
    <member name="P:zenOn.Element.ZoomMin">
      <summary>Lowest zoom step in which the element should be visible in the worldview. Default: -1.</summary>
    </member>
    <member name="M:zenOn.Element.AddVariable">
      <summary>Add a link to a Variable</summary>
    </member>
    <member name="M:zenOn.Element.AktiveX">
      <summary>Returns the linked Active-X control (Standard = Nothing)</summary>
    </member>
    <member name="M:zenOn.Element.CreateDynProperty">
      <summary>Creates SubItems of the actual object. The parameter has to be the name of the SubItem to be created.</summary>
    </member>
    <member name="M:zenOn.Element.DynProperties [GET]" />
    <member name="M:zenOn.Element.DynProperties [PUT]" />
    <member name="M:zenOn.Element.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Element.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.Element.ItemVariable">
      <summary>Returns the linked variable on the given position (depent of the type)</summary>
    </member>
    <member name="M:zenOn.Element.LeftClickDown">
      <summary>Executes the action of the dynamic element for pressing the left mouse button.</summary>
    </member>
    <member name="M:zenOn.Element.LeftClickUp">
      <summary>Executes the action of the dynamic element for releasing the left mouse button.</summary>
    </member>
    <member name="M:zenOn.Element.LeftDClick">
      <summary>Executes the action of the dynamic element for doubleclicking the left mouse button.</summary>
    </member>
    <member name="M:zenOn.Element.Move">
      <summary>Moves the element to the given position</summary>
    </member>
    <member name="M:zenOn.Element.RemoveVariable">
      <summary>Remove the link to the zenOn-variable on the position.</summary>
    </member>
    <member name="M:zenOn.Element.RightClickDown" />
    <member name="M:zenOn.Element.RightClickUp" />
    <member name="M:zenOn.Element.RightDClick" />
    <member name="M:zenOn.Element.SaveAktiveX">
      <summary>Saves the current ActiveX-settings into to picture (requires additional Save for the picture).</summary>
    </member>
    <member name="M:zenOn.Element.Update">
      <summary>Updates the element</summary>
    </member>
    <member name="M:zenOn.Element.WPFProperty [GET]">
      <summary>Get/Set a property of a certain WPF-Element.</summary>
    </member>
    <member name="M:zenOn.Element.WPFProperty [PUT]">
      <summary>Get/Set a property of a certain WPF-Element.</summary>
    </member>
    <member name="T:zenOn.Elements">
      <summary>This collection contains the defined dynamic elements of a Screen.</summary>
    </member>
    <member name="P:zenOn.Elements.Count">
      <summary>Returns count of the elements</summary>
    </member>
    <member name="P:zenOn.Elements.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="M:zenOn.Elements.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.Elements.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.Elements.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.Elements.ItemById">
      <summary>Returns a object with the given Id</summary>
    </member>
    <member name="T:zenOn.EventFieldData " />
    <member name="P:zenOn.EventFieldData .Text" />
    <member name="P:zenOn.EventFieldData .Type" />
    <member name="T:zenOn.FileManager">
      <summary>This collection represents the directories and files of the files node.</summary>
    </member>
    <member name="P:zenOn.FileManager.Parent">
      <summary>Returns the parent of the FileManager Object.</summary>
    </member>
    <member name="M:zenOn.FileManager.FolderItem">
      <summary>Returns the folder object for the given folder.</summary>
    </member>
    <member name="T:zenOn.FileManagerFileItem">
      <summary>This collection makes it possible to manage the files in a list.</summary>
    </member>
    <member name="P:zenOn.FileManagerFileItem.FileName">
      <summary>Returns the name of the File.</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.FileManagerFileItem.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.FileManagerFolder">
      <summary>This collection contains the folder object for the specified folder.</summary>
    </member>
    <member name="P:zenOn.FileManagerFolder.FileCount">
      <summary>Returns the amount of files located in the folder.</summary>
    </member>
    <member name="P:zenOn.FileManagerFolder.FolderCount">
      <summary>Returns the amount of folders located in the folder.</summary>
    </member>
    <member name="P:zenOn.FileManagerFolder.Name">
      <summary>Name of the folder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.AddItem">
      <summary>Inserts the given file into the folder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.CreateFolder">
      <summary>Creates a subfolder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.DeleteFile">
      <summary>Deletes the file from the folder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.DeleteFolder">
      <summary>Deletes the folder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.FileItem">
      <summary>Returns the file, at given index, from the folder.</summary>
    </member>
    <member name="M:zenOn.FileManagerFolder.FolderItem">
      <summary>Returns the sub-folder, at given index, from the folder.</summary>
    </member>
    <member name="T:zenOn.FontItem">
      <summary>Defines a font item</summary>
    </member>
    <member name="M:zenOn.FontItem.DynProperties [GET]" />
    <member name="M:zenOn.FontItem.DynProperties [PUT]" />
    <member name="M:zenOn.FontItem.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.FontItem.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.FontList">
      <summary>Defines a FontList object which contains single FontItem objects.</summary>
    </member>
    <member name="P:zenOn.FontList.Count">
      <summary>Returns the number of Font objects.</summary>
    </member>
    <member name="M:zenOn.FontList.Create">
      <summary>Create a new Font.</summary>
    </member>
    <member name="M:zenOn.FontList.DynProperties [GET]" />
    <member name="M:zenOn.FontList.DynProperties [PUT]" />
    <member name="M:zenOn.FontList.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.FontList.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.FontList.Item">
      <summary>Returns the Font at the given index.</summary>
    </member>
    <member name="M:zenOn.FontList.ItemById">
      <summary>Returns the Font with the given Id.</summary>
    </member>
    <member name="T:zenOn.FontLists">
      <summary>Contains the FontList objects of a project.</summary>
    </member>
    <member name="P:zenOn.FontLists.Count">
      <summary>Returns the number of Fontlist objects.</summary>
    </member>
    <member name="M:zenOn.FontLists.Create">
      <summary>Create a new FontList.</summary>
    </member>
    <member name="M:zenOn.FontLists.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.FontLists.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.FontLists.Item">
      <summary>Returns the FontList at the given index.</summary>
    </member>
    <member name="M:zenOn.FontLists.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.Interlocking">
      <summary>With the interlocking object you have the opportunity to edit standard interlockings and command interlockings.</summary>
    </member>
    <member name="M:zenOn.Interlocking.CreateDynProperty">
      <summary>With the DynProperties "Variables" and "Actions" you have the opportunity to create a variable at an interlocking and to create an action at a command interlocking.</summary>
    </member>
    <member name="M:zenOn.Interlocking.DynProperties [GET]" />
    <member name="M:zenOn.Interlocking.DynProperties [PUT]" />
    <member name="M:zenOn.Interlocking.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Interlocking.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="T:zenOn.Interlockings">
      <summary>With the interlockings object you have the opportunity to create and edit interlockings in the list.</summary>
    </member>
    <member name="P:zenOn.Interlockings.Count">
      <summary>Returns the amount of interlockings.</summary>
    </member>
    <member name="P:zenOn.Interlockings.Parent">
      <summary>Returns the parent of the interlockings object.</summary>
    </member>
    <member name="M:zenOn.Interlockings.Create">
      <summary>Creates a new interlocking.</summary>
    </member>
    <member name="M:zenOn.Interlockings.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Interlockings.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Interlockings.Item">
      <summary>Returns the interlocking at the given index.</summary>
    </member>
    <member name="M:zenOn.Interlockings.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.LanguageTable">
      <summary>Represents the language table of the project.</summary>
    </member>
    <member name="P:zenOn.LanguageTable.Count">
      <summary>Count of Files in the Language Table</summary>
    </member>
    <member name="P:zenOn.LanguageTable.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.LanguageTable.CreateFile">
      <summary>Creates a new File in the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.DeleteFile">
      <summary>Deletes a File from the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.DeleteKey">
      <summary>Deletes a Key from all Files of the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.ExportCSV">
      <summary>Exports the Language Table to a CSV file</summary>
    </member>
    <member name="M:zenOn.LanguageTable.ExportFile">
      <summary>Exports an existing File from the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.GetString">
      <summary>Returns a String from the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.ImportCSV">
      <summary>Imports the Language Table from a CSV file</summary>
    </member>
    <member name="M:zenOn.LanguageTable.ImportFile">
      <summary>Imports (and merges) an existing File into the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.Item">
      <summary>Returns the File by Name or Position</summary>
    </member>
    <member name="M:zenOn.LanguageTable.Save">
      <summary>Saves the Language Table</summary>
    </member>
    <member name="M:zenOn.LanguageTable.SetString">
      <summary>Sets a String in the Language Table</summary>
    </member>
    <member name="T:zenOn.License" />
    <member name="M:zenOn.License.BorrowExpirationTime [GET]" />
    <member name="M:zenOn.License.ExpirationTime [GET]" />
    <member name="M:zenOn.License.GetDriverLicenseEntry" />
    <member name="M:zenOn.License.GetLicenseEntry" />
    <member name="M:zenOn.License.GetLogicDriverLicenseEntry" />
    <member name="M:zenOn.License.IsBorrowExpirationTimeSet [GET]" />
    <member name="M:zenOn.License.IsDriverLicensed" />
    <member name="M:zenOn.License.IsExpirationTimeSet [GET]" />
    <member name="M:zenOn.License.IsLicensed" />
    <member name="M:zenOn.License.IsLogicDriverLicensed" />
    <member name="M:zenOn.License.IsTimeQuotaSet [GET]" />
    <member name="M:zenOn.License.SerialNumber [GET]" />
    <member name="M:zenOn.License.TimeQuotaInMinutes [GET]" />
    <member name="T:zenOn.LicenseEntry" />
    <member name="M:zenOn.LicenseEntry.Values [GET]" />
    <member name="T:zenOn.Limit">
      <summary>The collection Variables contains all defined limits of a variable.</summary>
    </member>
    <member name="P:zenOn.Limit.AlarmClass">
      <summary>Alarmclass</summary>
    </member>
    <member name="P:zenOn.Limit.AlarmGroup">
      <summary>Alarmgroup</summary>
    </member>
    <member name="P:zenOn.Limit.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.Limit.Text">
      <summary>Alarmtext</summary>
    </member>
    <member name="P:zenOn.Limit.Value">
      <summary>Value</summary>
    </member>
    <member name="M:zenOn.Limit.DynProperties [GET]" />
    <member name="M:zenOn.Limit.DynProperties [PUT]" />
    <member name="M:zenOn.Limit.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Limit.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.Limit.IsMax">
      <summary>Returns 'True' if the type of the current limit is 'Max', violated as soon as the current value is higher.</summary>
    </member>
    <member name="M:zenOn.Limit.IsMin">
      <summary>Returns 'True' if the type of the current limit is 'Min', violated as soon as the current value is lower.</summary>
    </member>
    <member name="T:zenOn.Limits">
      <summary>With this collection you can access the defined limits of a variable.</summary>
    </member>
    <member name="P:zenOn.Limits.Count">
      <summary>Count of defined limits</summary>
    </member>
    <member name="P:zenOn.Limits.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Limits.Item">
      <summary>Returns limit on the given position</summary>
    </member>
    <member name="T:zenOn.MdiElement">
      <summary>This collection returns the default settings of the MDI elements.</summary>
    </member>
    <member name="P:zenOn.MdiElement.BackColor" />
    <member name="P:zenOn.MdiElement.Caption">
      <summary>Name of the linked picture type specific function.</summary>
    </member>
    <member name="P:zenOn.MdiElement.ForeColor" />
    <member name="P:zenOn.MdiElement.Height">
      <summary>Height of the element (in pixels).</summary>
    </member>
    <member name="P:zenOn.MdiElement.ID">
      <summary>Returns the unique ID of the "MdiElement" object.</summary>
    </member>
    <member name="P:zenOn.MdiElement.IsDefault">
      <summary>Returns TRUE, if the "MdiElement" object belongs to the default elements.</summary>
    </member>
    <member name="P:zenOn.MdiElement.Left">
      <summary>Returns the position of the left window border of the element in pixel.</summary>
    </member>
    <member name="P:zenOn.MdiElement.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.MdiElement.Top">
      <summary>Returns the position of the top window border of the element in pixel.</summary>
    </member>
    <member name="P:zenOn.MdiElement.Type">
      <summary>Type of the "Element" object.</summary>
    </member>
    <member name="P:zenOn.MdiElement.Width">
      <summary>Width of the element (in pixel).</summary>
    </member>
    <member name="M:zenOn.MdiElement.DynProperties [GET]" />
    <member name="M:zenOn.MdiElement.DynProperties [PUT]" />
    <member name="M:zenOn.MdiElement.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.MdiElement.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="T:zenOn.MdiElements">
      <summary>This object manages "MdiElement" objects.</summary>
    </member>
    <member name="P:zenOn.MdiElements.Count">
      <summary>Returns count of the elements</summary>
    </member>
    <member name="P:zenOn.MdiElements.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="P:zenOn.MdiElements.UseProfile">
      <summary>Returns TRUE, if profile elements are available for this type of object.</summary>
    </member>
    <member name="M:zenOn.MdiElements.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="T:zenOn.MDITemplate" />
    <member name="M:zenOn.MDITemplate.DynProperties [GET]" />
    <member name="M:zenOn.MDITemplate.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.MDITemplate.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="T:zenOn.MDITemplates" />
    <member name="P:zenOn.MDITemplates.Count">
      <summary>Number of MDI Templates in the Collection.</summary>
    </member>
    <member name="M:zenOn.MDITemplates.Item">
      <summary>Returns the MDI Template by Name or Position.</summary>
    </member>
    <member name="T:zenOn.MessageControl" />
    <member name="P:zenOn.MessageControl.ActiveAtStartup" />
    <member name="P:zenOn.MessageControl.Attempts" />
    <member name="P:zenOn.MessageControl.CelDetail" />
    <member name="P:zenOn.MessageControl.CurrentQueue" />
    <member name="P:zenOn.MessageControl.LogMessageDeleteActions" />
    <member name="P:zenOn.MessageControl.TimeToWait" />
    <member name="M:zenOn.MessageControl.DynProperties [GET]" />
    <member name="M:zenOn.MessageControl.DynProperties [PUT]" />
    <member name="M:zenOn.MessageControl.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.MessageControl.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="E:zenOn.MessageControl.MessageAcknowledged" />
    <member name="E:zenOn.MessageControl.MessageAcknowledgeTimeOut" />
    <member name="E:zenOn.MessageControl.MessageCreated">
      <summary>Event is fired once a new message is created.</summary>
    </member>
    <member name="E:zenOn.MessageControl.MessageDeleted">
      <summary>Event is fired once a message gets deleted.</summary>
    </member>
    <member name="E:zenOn.MessageControl.MessageIn">
      <summary>Event is fired once a message comes in.</summary>
    </member>
    <member name="E:zenOn.MessageControl.MessageNegAcknowledged" />
    <member name="E:zenOn.MessageControl.MessageSendError">
      <summary>Event is fired once an error occurs during the message sending process.</summary>
    </member>
    <member name="E:zenOn.MessageControl.MessageSent">
      <summary>Event is fired once a message has been sent.</summary>
    </member>
    <member name="E:zenOn.MessageControl.SelectionChanged" />
    <member name="T:zenOn.MessageControlMessage">
      <summary>With this object new users can be created and existing users can be edited/deleted during online operation.</summary>
    </member>
    <member name="P:zenOn.MessageControlMessage.AcknowledgeRequired" />
    <member name="P:zenOn.MessageControlMessage.AcknowledgeTimeOut" />
    <member name="P:zenOn.MessageControlMessage.Attachment" />
    <member name="P:zenOn.MessageControlMessage.Attempts" />
    <member name="P:zenOn.MessageControlMessage.CodesFromFunction" />
    <member name="P:zenOn.MessageControlMessage.CustomIdentifier" />
    <member name="P:zenOn.MessageControlMessage.CycleCounter" />
    <member name="P:zenOn.MessageControlMessage.Destination" />
    <member name="P:zenOn.MessageControlMessage.DestinationType" />
    <member name="P:zenOn.MessageControlMessage.DispatcherType" />
    <member name="P:zenOn.MessageControlMessage.GroupSendingMethod" />
    <member name="P:zenOn.MessageControlMessage.Guid" />
    <member name="P:zenOn.MessageControlMessage.MaxAttempts" />
    <member name="P:zenOn.MessageControlMessage.MessageText" />
    <member name="P:zenOn.MessageControlMessage.RecipientType" />
    <member name="P:zenOn.MessageControlMessage.Send" />
    <member name="P:zenOn.MessageControlMessage.SendingMode" />
    <member name="P:zenOn.MessageControlMessage.Sent" />
    <member name="P:zenOn.MessageControlMessage.TimeToWait" />
    <member name="P:zenOn.MessageControlMessage.Title" />
    <member name="P:zenOn.MessageControlMessage.TypeStyle" />
    <member name="P:zenOn.MessageControlMessage.UserName">
      <summary>Returns the name of the target User.</summary>
    </member>
    <member name="M:zenOn.MessageControlMessage.DynProperties [GET]" />
    <member name="M:zenOn.MessageControlMessage.DynProperties [PUT]" />
    <member name="M:zenOn.MessageControlMessage.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.MessageControlMessage.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="T:zenOn.ModifiedFunctionAuthorization" />
    <member name="M:zenOn.ModifiedFunctionAuthorization.Function [GET]" />
    <member name="M:zenOn.ModifiedFunctionAuthorization.Level [GET]" />
    <member name="T:zenOn.ModifiedUser" />
    <member name="M:zenOn.ModifiedUser.Identification [GET]" />
    <member name="M:zenOn.ModifiedUser.Status [GET]" />
    <member name="M:zenOn.ModifiedUser.User [GET]" />
    <member name="T:zenOn.ModifiedUserGroup" />
    <member name="M:zenOn.ModifiedUserGroup.Name [GET]" />
    <member name="M:zenOn.ModifiedUserGroup.Status [GET]" />
    <member name="M:zenOn.ModifiedUserGroup.UserGroup [GET]" />
    <member name="T:zenOn.OnlineAlarm" />
    <member name="P:zenOn.OnlineAlarm.AlarmEventMode">
      <summary>Returns and sets event mode of the online-alarm.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.Activate">
      <summary>Activates the online-alarm.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.Deactivate">
      <summary>Deactivates the online-alarm.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.IsActive [GET]">
      <summary>Returns if the online-alarm is active.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.Name [GET]">
      <summary>Name of the online-alarm.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.Parent [GET]">
      <summary>Parent-object.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarm.SetFilter">
      <summary>Sets the filter criteria as XML string.</summary>
    </member>
    <member name="E:zenOn.OnlineAlarm.BulkChanged">
      <summary>Event: Is fired with a list of alarm object changes.</summary>
    </member>
    <member name="E:zenOn.OnlineAlarm.Changed">
      <summary>Event: Is fired for alarm object change.</summary>
    </member>
    <member name="T:zenOn.OnlineAlarmCollection" />
    <member name="M:zenOn.OnlineAlarmCollection.Count [GET]">
      <summary>Count of contained online-alarm objects.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarmCollection.CreateOnlineAlarm">
      <summary>Creates a new online-alarm object.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarmCollection.DeleteOnlineAlarm">
      <summary>Deletes the given online-alarm object.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarmCollection.GetItem">
      <summary>Returns the online-alarm by name or position.</summary>
    </member>
    <member name="M:zenOn.OnlineAlarmCollection.Parent [GET]">
      <summary>Parent-object</summary>
    </member>
    <member name="T:zenOn.OnlineCel" />
    <member name="P:zenOn.OnlineCel.CelEventMode">
      <summary>Returns and sets event mode of the online-CEL.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.Activate">
      <summary>Activates the online-CEL.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.Deactivate">
      <summary>Deactivates the online-CEL.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.IsActive [GET]">
      <summary>Returns if the online-CEL is active.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.Name [GET]">
      <summary>Name of the online-CEL.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.Parent [GET]">
      <summary>Parent-object.</summary>
    </member>
    <member name="M:zenOn.OnlineCel.SetFilter">
      <summary>Sets the filter criteria as XML string.</summary>
    </member>
    <member name="E:zenOn.OnlineCel.BulkChanged">
      <summary>Event: Is fired with a list of CEL object changes.</summary>
    </member>
    <member name="E:zenOn.OnlineCel.Changed">
      <summary>Event: Is fired for CEL object change.</summary>
    </member>
    <member name="T:zenOn.OnlineCelCollection" />
    <member name="M:zenOn.OnlineCelCollection.Count [GET]">
      <summary>Count of contained online-CEL objects.</summary>
    </member>
    <member name="M:zenOn.OnlineCelCollection.CreateOnlineCel">
      <summary>Creates a new online-CEL object.</summary>
    </member>
    <member name="M:zenOn.OnlineCelCollection.DeleteOnlineCel">
      <summary>Deletes the given online-CEL object.</summary>
    </member>
    <member name="M:zenOn.OnlineCelCollection.GetItem">
      <summary>Returns the online-CEL by name or position.</summary>
    </member>
    <member name="M:zenOn.OnlineCelCollection.Parent [GET]">
      <summary>Parent-object.</summary>
    </member>
    <member name="T:zenOn.OnlineVariable">
      <summary>OnlineVariable is a container for variables.</summary>
    </member>
    <member name="P:zenOn.OnlineVariable.Aktiv">
      <summary>Returns the communication status of the online variable.</summary>
    </member>
    <member name="P:zenOn.OnlineVariable.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.OnlineVariable.EventMode">
      <summary>Activated event mode.</summary>
    </member>
    <member name="P:zenOn.OnlineVariable.Name">
      <summary>Name of the online-variable (unique)</summary>
    </member>
    <member name="P:zenOn.OnlineVariable.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.ActivateBulkMode">
      <summary>Activate bulk event mode.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.Add">
      <summary>Adds a new IVariable item to the online variable container.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.AddBulk" />
    <member name="M:zenOn.OnlineVariable.Define">
      <summary>Activates monitoring of all variables linked to this object.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.DynProperties [GET]" />
    <member name="M:zenOn.OnlineVariable.DynProperties [PUT]" />
    <member name="M:zenOn.OnlineVariable.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.OnlineVariable.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.Item" />
    <member name="M:zenOn.OnlineVariable.Remove">
      <summary>Removes a variable from the online variable container.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.SetMemCfg" />
    <member name="M:zenOn.OnlineVariable.Undefine">
      <summary>Deactivates monitoring of the linked control system variables.</summary>
    </member>
    <member name="M:zenOn.OnlineVariable.WriteBack" />
    <member name="E:zenOn.OnlineVariable.VariableBulkChange">
      <summary>Event: Is fired to handle a bulk of changed variable values.</summary>
    </member>
    <member name="E:zenOn.OnlineVariable.VariableChange">
      <summary>Event: Is fired by changing the value of a variable</summary>
    </member>
    <member name="T:zenOn.OnlineVariables">
      <summary>This collection contains the single objects OnlineVariable.</summary>
    </member>
    <member name="P:zenOn.OnlineVariables.Count">
      <summary>Count of defined online-variables</summary>
    </member>
    <member name="P:zenOn.OnlineVariables.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.OnlineVariables.CreateOnlineVariables">
      <summary>Creates a new online-variable (unique name)</summary>
    </member>
    <member name="M:zenOn.OnlineVariables.DeleteOnlineVariables">
      <summary>Deletes the given variable.</summary>
    </member>
    <member name="M:zenOn.OnlineVariables.Item">
      <summary>Returns the variable by name or position</summary>
    </member>
    <member name="T:zenOn.Passwords">
      <summary>This object represents the user administration of the current project.With this object new users can be created and existing users can be edited/deleted during online operation.</summary>
    </member>
    <member name="P:zenOn.Passwords.CountUser">
      <summary>Count of defined users</summary>
    </member>
    <member name="P:zenOn.Passwords.CountUserGroup">
      <summary>Count of defined usergroups</summary>
    </member>
    <member name="P:zenOn.Passwords.LoggedUser">
      <summary>Current logged on user</summary>
    </member>
    <member name="P:zenOn.Passwords.LoggedUsername">
      <summary>TagName of the logged on user</summary>
    </member>
    <member name="P:zenOn.Passwords.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Passwords.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.CheckLogin">
      <summary>Checks the Login of a user with given ID and password</summary>
    </member>
    <member name="M:zenOn.Passwords.CheckLoginEx">
      <summary>Checks the Login of a user with given ID and password hash.</summary>
    </member>
    <member name="M:zenOn.Passwords.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.CreateUser">
      <summary>Creates a new user</summary>
    </member>
    <member name="M:zenOn.Passwords.CreateUserEx">
      <summary>Creates a new user</summary>
    </member>
    <member name="M:zenOn.Passwords.CreateUserGroup">
      <summary>Creates a new usergroup.</summary>
    </member>
    <member name="M:zenOn.Passwords.DeleteUser">
      <summary>Deletes the given user</summary>
    </member>
    <member name="M:zenOn.Passwords.DeleteUserGroup">
      <summary>Deletes the given usergroup.</summary>
    </member>
    <member name="M:zenOn.Passwords.Export">
      <summary>Exports the user list</summary>
    </member>
    <member name="M:zenOn.Passwords.ExportGroup">
      <summary>Exports the usergroup list.</summary>
    </member>
    <member name="M:zenOn.Passwords.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.Import">
      <summary>Imports the user list.</summary>
    </member>
    <member name="M:zenOn.Passwords.ImportGroup">
      <summary>Imports the usergroup list.</summary>
    </member>
    <member name="M:zenOn.Passwords.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Passwords.ItemUser">
      <summary>Returns user by position or by name</summary>
    </member>
    <member name="M:zenOn.Passwords.ItemUserGroup">
      <summary>Returns usergroup by position or by name.</summary>
    </member>
    <member name="M:zenOn.Passwords.Login">
      <summary>Logs in the user with the given ID</summary>
    </member>
    <member name="M:zenOn.Passwords.LoginPassword">
      <summary>Logs in the user with the given ID and the given password</summary>
    </member>
    <member name="M:zenOn.Passwords.Logoff">
      <summary>Log out the current user</summary>
    </member>
    <member name="M:zenOn.Passwords.SingleExport">
      <summary>Exports the Item with given Name oder Index.</summary>
    </member>
    <member name="M:zenOn.Passwords.SingleExportGroup">
      <summary>Exports the Item with given Name oder Index.</summary>
    </member>
    <member name="M:zenOn.Passwords.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="E:zenOn.Passwords.Saved">
      <summary>Wird gefeuert beim Speicher der Benutzervewaltung.</summary>
    </member>
    <member name="E:zenOn.Passwords.UserChange">
      <summary>This event is executed, when a user is logged into the system.</summary>
    </member>
    <member name="E:zenOn.Passwords.ValidatePassword" />
    <member name="T:zenOn.PfsCalendar" />
    <member name="M:zenOn.PfsCalendar.CreateSwitchingPointFilter">
      <summary>Creates a switching point filter that can be configured and then used to call the SwitchingPointPreview method</summary>
    </member>
    <member name="M:zenOn.PfsCalendar.SchedulesForDay">
      <summary>Returns the linked schedules for the day</summary>
    </member>
    <member name="M:zenOn.PfsCalendar.TimeModelForDay">
      <summary>Returns the linked time model for the day</summary>
    </member>
    <member name="T:zenOn.PfsEngine">
      <summary>The PfsEngine object is the entry point into the Pfs object model. With the property CountryName you can define the country for the holiday definition.</summary>
    </member>
    <member name="P:zenOn.PfsEngine.CountryName">
      <summary>Contains the value for the selected country.</summary>
    </member>
    <member name="P:zenOn.PfsEngine.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="M:zenOn.PfsEngine.Calendar">
      <summary>Retrieves the object for the pfs calendar.</summary>
    </member>
    <member name="M:zenOn.PfsEngine.Events">
      <summary>The "Event" Object is a collection of all  "Event" objects, which are created from the user.</summary>
    </member>
    <member name="M:zenOn.PfsEngine.Groups">
      <summary>The "Groups" object manages the "Group" objects.</summary>
    </member>
    <member name="M:zenOn.PfsEngine.Holidays">
      <summary>In the "Holidays" object all "Holiday" objects are managed.</summary>
    </member>
    <member name="M:zenOn.PfsEngine.Save">
      <summary>With the "Save" methode all changes made in the PFS module can be saved.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.AfterUpdate">
      <summary>This event is fired, after the Save methode has been excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.BeforeUpdate">
      <summary>This event is fired, before the Save methode has been excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateBreak">
      <summary>This event is fired, when a new break has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateEvent">
      <summary>This event is fired, when a new event has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateGroup">
      <summary>This event is fired, when a new group has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateSchedule">
      <summary>This event is fired, when a new schedule has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateScheduleTime">
      <summary>This event is fired, when a new schedule time has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateScheduleValue">
      <summary>This event is fired, when a new schedule value has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateShift">
      <summary>This event is fired, when a new shift has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnCreateTimeModell">
      <summary>This event is fired, when a new time model has been created.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteBreak">
      <summary>This event is fired, when a break has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteEvent">
      <summary>This event is fired, when an event has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteGroup">
      <summary>This event is fired, when a group has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteSchedule">
      <summary>This event is fired, when a schedule has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteScheduleTime">
      <summary>This event is fired, when a schedule time has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteScheduleValue">
      <summary>This event is fired, when a schedule value has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteShift">
      <summary>This event is fired, when a shift has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnDeleteTimeModell">
      <summary>This event is fired, when a time model has been deleted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameBreak">
      <summary>This event is fired, when the rename methode of a break is excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameEvent">
      <summary>This event is fired, when the Rename methode  of an event has been excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameGroup">
      <summary>This event is fired, when the rename methode of a group is excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameSchedule">
      <summary>This event is fired, when the rename methode of a schedule is excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameShift">
      <summary>This event is fired, when the rename methode of a shift is excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnRenameTimeModell">
      <summary>This event is fired, when the rename methode of a time model is excecuted.</summary>
    </member>
    <member name="E:zenOn.PfsEngine.OnSave">
      <summary>This event is fired, when the Save methode is excecuted.</summary>
    </member>
    <member name="T:zenOn.PfsEvent">
      <summary>User defined event, which can be linked to the schedules as relative switching operations.</summary>
    </member>
    <member name="P:zenOn.PfsEvent.Guid">
      <summary>Is the Guid of the event which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsEvent.ID">
      <summary>is the ID of the event.</summary>
    </member>
    <member name="P:zenOn.PfsEvent.Name">
      <summary>Is the name of the event.</summary>
    </member>
    <member name="P:zenOn.PfsEvent.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsEvent.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsEvent.Execute">
      <summary>With this methode you can manualy excecute an event.</summary>
    </member>
    <member name="M:zenOn.PfsEvent.Rename">
      <summary>With this methode you can rename the event.</summary>
    </member>
    <member name="M:zenOn.PfsEvent.SetModify">
      <summary>Sets the modify flag, so that the save option in the context menu of the PFS object is available.</summary>
    </member>
    <member name="T:zenOn.PfsEvents">
      <summary>The Events collection contains the user-defined events of the PFS.User-defined events can be linked to the schedules as relative switching operations.</summary>
    </member>
    <member name="P:zenOn.PfsEvents.Count">
      <summary>Returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsEvents.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsEvents.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsEvents.CreateEvent">
      <summary>Is the methode to create a new event.</summary>
    </member>
    <member name="M:zenOn.PfsEvents.DeleteEvent">
      <summary>With this methode you can delete an event.</summary>
    </member>
    <member name="M:zenOn.PfsEvents.Item">
      <summary>Returns the object Event from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.PfsEvents.ItemById" />
    <member name="T:zenOn.PfsGroup">
      <summary>Describes an equipment object in the PFS module.</summary>
    </member>
    <member name="P:zenOn.PfsGroup.CycleEnd">
      <summary>Is the end time of the group in seconds.</summary>
    </member>
    <member name="P:zenOn.PfsGroup.CycleStart">
      <summary>Is the start time of the group in seconds.</summary>
    </member>
    <member name="P:zenOn.PfsGroup.Guid">
      <summary>Is the Guid of the group which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsGroup.Name">
      <summary>Is the name of the group.</summary>
    </member>
    <member name="P:zenOn.PfsGroup.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsGroup.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsGroup.Rename">
      <summary>With this methode you can rename the group.</summary>
    </member>
    <member name="M:zenOn.PfsGroup.Schedules">
      <summary>The "Schedules" object manages the "Schedule" objects.</summary>
    </member>
    <member name="M:zenOn.PfsGroup.SetModify">
      <summary>With this methode you can set the modify flag, so that the save option in the context menu of the PFS object is available.</summary>
    </member>
    <member name="M:zenOn.PfsGroup.SystemModelGroupAtIndex" />
    <member name="M:zenOn.PfsGroup.SystemModelGroupCount" />
    <member name="M:zenOn.PfsGroup.TimeModells">
      <summary>The "TimeModels" object manages the "TimeModel" objects.</summary>
    </member>
    <member name="T:zenOn.PfsGroups">
      <summary>The Groups collection contains the groups of the PFS module (in the editor also called "equipments).</summary>
    </member>
    <member name="P:zenOn.PfsGroups.Count">
      <summary>The method returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsGroups.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsGroups.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsGroups.CreateGroup">
      <summary>With this method you can create a new group.</summary>
    </member>
    <member name="M:zenOn.PfsGroups.DeleteGroup">
      <summary>With this methode you can delete a group.</summary>
    </member>
    <member name="M:zenOn.PfsGroups.Item">
      <summary>Returns the group object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.PfsHoliday">
      <summary>This object contains a name and a date for the holiday.</summary>
    </member>
    <member name="P:zenOn.PfsHoliday.date" />
    <member name="P:zenOn.PfsHoliday.Name">
      <summary>Returns the unique name of the holiday.</summary>
    </member>
    <member name="P:zenOn.PfsHoliday.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsHoliday.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="T:zenOn.PfsHolidays">
      <summary>The Holidays collection contains all holiday definitions of the defined country for the current year.</summary>
    </member>
    <member name="P:zenOn.PfsHolidays.Count">
      <summary>The method returns the number of available objects</summary>
    </member>
    <member name="P:zenOn.PfsHolidays.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsHolidays.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsHolidays.Item">
      <summary>Returns the holiday object from the collection, which is identified by the parameter vPosition</summary>
    </member>
    <member name="T:zenOn.PfsModellBreak">
      <summary>The ModellBreak object is a break within a shift in a time model</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.EndTime">
      <summary>Is the end time of the break.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.Guid">
      <summary>Is the Guid of the group which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.KeyNote">
      <summary>The Keynote returns the name of one or more main objects and of the current object sepperated with a dot.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.Name">
      <summary>Is the name of the break.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.Notes">
      <summary>Notes can be added and read out, this property contains the notes to a selected break.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreak.StartTime">
      <summary>Is the start time of the break.</summary>
    </member>
    <member name="M:zenOn.PfsModellBreak.Rename">
      <summary>With this method you can rename a break.</summary>
    </member>
    <member name="T:zenOn.PfsModellBreaks">
      <summary>The ModellBreaks collection allows the access to the breaks of a shift.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreaks.Count">
      <summary>The method returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsModellBreaks.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsModellBreaks.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsModellBreaks.CreateBreak">
      <summary>Creates a new break in the current shift and returns it.</summary>
    </member>
    <member name="M:zenOn.PfsModellBreaks.DeleteBreak">
      <summary>Deletes the defined break from the current shift.</summary>
    </member>
    <member name="M:zenOn.PfsModellBreaks.Item">
      <summary>Returns the ModelBreak object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.PfsModellShift">
      <summary>The ModellShift object is a shift in a time model</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.EndTime">
      <summary>Is the end time of the shift.</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.Guid">
      <summary>Is the Guid of the ModelShift which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.KeyNote">
      <summary>The Keynote returns the name of one or more main objects and of the current object sepperated with a dot</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.Name">
      <summary>Is the name of the shift.</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.Notes">
      <summary>Notes can be added and read out, this property contains the notes to a selected shift.</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsModellShift.StartTime">
      <summary>Is the start time of the shift.</summary>
    </member>
    <member name="M:zenOn.PfsModellShift.Breaks">
      <summary>The "Breaks" object manages the "Break" objects.</summary>
    </member>
    <member name="M:zenOn.PfsModellShift.Rename">
      <summary>With this methode a shift can be renamed.</summary>
    </member>
    <member name="T:zenOn.PfsModellShifts">
      <summary>The ModellShifts collection allows the access to the shifts of a time model.</summary>
    </member>
    <member name="P:zenOn.PfsModellShifts.Count">
      <summary>The method returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsModellShifts.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsModellShifts.Session">
      <summary>Returns the current project reference.</summary>
    </member>
    <member name="M:zenOn.PfsModellShifts.CreateShift">
      <summary>Creates a new shift.</summary>
    </member>
    <member name="M:zenOn.PfsModellShifts.DeleteShift">
      <summary>Deletes the defined shift.</summary>
    </member>
    <member name="M:zenOn.PfsModellShifts.Item">
      <summary>Returns the linked shift on the defined position or with the unique name.</summary>
    </member>
    <member name="T:zenOn.PfsSchedule">
      <summary>Create absolute and relativ times and link them with switching points, so that a funktion is excecuted or a the value of a variable can be changed.</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Active">
      <summary>With this property the schedule can be activated or deactivated.</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Guid">
      <summary>Is the Guid of the Schedule which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.KeyNote">
      <summary>The Keynote returns the name of one or more main objects and of the current object sepperated with a dot</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Name">
      <summary>Is the name of the schedule.</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsSchedule.Structure">
      <summary>The Structure property is true if the schedule is marked as "structured schedule".</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.AddToDay">
      <summary>With this methode a schedule can be linked to a day.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.ExecutionDays">
      <summary>This Collection contains all days where a schedule is linked but not as default.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.IsDefaultDay">
      <summary>With this methode you can check if a schedule is linked as default schedule to a daytype.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.IsOnDay">
      <summary>The methode returns a tpPFSDayLink.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.RemoveFromDay">
      <summary>With this methode a schedule can be removed from a specific date.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.Rename">
      <summary>With this methode you can rename a schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.ScheduleLinks">
      <summary>This collecton manages the functions and variables which are linked to the schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.Schedules">
      <summary>A Schedule can also be a container for other schedules, with the "Schedules" collection you can access the sub schedules of a schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.ScheduleTimes">
      <summary>This object manages the schedule times of the schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.SetDefaultDay">
      <summary>With this methode you can link a schedule as default to a day type.</summary>
    </member>
    <member name="M:zenOn.PfsSchedule.SkippedDays">
      <summary>Manages the days which are manualy linked to a schedule for some specific dates as skipped days.</summary>
    </member>
    <member name="T:zenOn.PfsScheduleDay">
      <summary>A Schedule day object is a specific date on which a schedule is excecuted or not.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDay.date" />
    <member name="P:zenOn.PfsScheduleDay.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDay.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDay.Type">
      <summary>Contains the type of the schedule day.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleDay.DayLinkType [GET]" />
    <member name="T:zenOn.PfsScheduleDays">
      <summary>The ScheduleDay collection contains a date, on which the schedule should be executed or not.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDays.Count">
      <summary>The method returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDays.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleDays.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleDays.Item">
      <summary>Returns the ScheduleDay object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="T:zenOn.PfsScheduleLink">
      <summary>The ScheduleLink object is a link to the variable/function.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLink.Guid">
      <summary>Is the Guid of the ScheduleLink which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLink.Name">
      <summary>Is the name of the ScheduleLink.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLink.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLink.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLink.Type" />
    <member name="M:zenOn.PfsScheduleLink.RtFunction">
      <summary>Returns the function which is linked to the switching point.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleLink.Variable">
      <summary>Returns the variable which is linked to the switching point.</summary>
    </member>
    <member name="T:zenOn.PfsScheduleLinks">
      <summary>The "IPfsScheduleLinks" object manages the collection of the "IPfsScheduleLink" objects.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleLinks.Count" />
    <member name="P:zenOn.PfsScheduleLinks.Parent" />
    <member name="P:zenOn.PfsScheduleLinks.Session" />
    <member name="M:zenOn.PfsScheduleLinks.CreateFktLink">
      <summary>With this methode you can create a new function link.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleLinks.CreateVarLink">
      <summary>With this methode you can create a new variable link.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleLinks.DeleteFktLink">
      <summary>With this methode a function link can be deleted.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleLinks.DeleteVarLink">
      <summary>With this methode a variable link can be deleted.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleLinks.Item">
      <summary>Returns the ScheduleLink object at the specified position.</summary>
    </member>
    <member name="T:zenOn.PfsSchedules">
      <summary>The Schedules collection contains the existing schedules of an equipment or a parent schedule.</summary>
    </member>
    <member name="P:zenOn.PfsSchedules.Count">
      <summary>The method returns the number of available objects.</summary>
    </member>
    <member name="P:zenOn.PfsSchedules.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsSchedules.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="M:zenOn.PfsSchedules.CreateSchedule">
      <summary>With this methode you can create a new Schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedules.DeleteSchedule">
      <summary>With this methode you can delete a Schedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedules.DuplicateSchedule">
      <summary>This method will copy the schedule identified by bstrFullSourceName into the PfsSchedules collection. It will return a pointer to the newly created PfsSchedule.</summary>
    </member>
    <member name="M:zenOn.PfsSchedules.DuplicateSchedule2" />
    <member name="M:zenOn.PfsSchedules.Item">
      <summary>Returns the Schedule object from the collection, which is identified by the parameter vNameOrPos.</summary>
    </member>
    <member name="M:zenOn.PfsSchedules.ParentSchedule [GET]" />
    <member name="T:zenOn.PfsScheduleTime">
      <summary>Schedule Times are the entries in a schedule which can contain switching points for functions or variables.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.EventId">
      <summary>Adds a pre-defined event to a relative switch point.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Guid">
      <summary>Is the Guid of the ScheduleLink which is unique and can be used to identify the object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Offset">
      <summary>Is the deviation of the set time.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Parent">
      <summary>Returns the parent object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Session">
      <summary>Contains the "Project" object.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Time">
      <summary>Is the Time which is set to the Schedule Time.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTime.Type" />
    <member name="P:zenOn.PfsScheduleTime.UserEventId">
      <summary>Adds a user defined event to a relative switch point.</summary>
    </member>
    <member name="M:zenOn.PfsScheduleTime.Event" />
    <member name="M:zenOn.PfsScheduleTime.ScheduleValues">
      <summary>Contains all  linked values of the schedule time.</summary>
    </member>
    <member name="T:zenOn.PfsScheduleTimes">
      <summary>The ScheduleTimes collection contains the times of the schedule.</summary>
    </member>
    <member name="P:zenOn.PfsScheduleTimes.Count" />
    <member name="P:zenOn.PfsScheduleTimes.Parent" />
    <member name="P:zenOn.PfsScheduleTimes.Session" />
    <member name="M:zenOn.PfsScheduleTimes.CreateTime">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsScheduleTimes.DeleteTime">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsScheduleTimes.Item">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.PfsScheduleValue" />
    <member name="P:zenOn.PfsScheduleValue.Active" />
    <member name="P:zenOn.PfsScheduleValue.Guid" />
    <member name="P:zenOn.PfsScheduleValue.Parent" />
    <member name="P:zenOn.PfsScheduleValue.PasswordLevel" />
    <member name="P:zenOn.PfsScheduleValue.Session" />
    <member name="P:zenOn.PfsScheduleValue.Type" />
    <member name="P:zenOn.PfsScheduleValue.Value" />
    <member name="M:zenOn.PfsScheduleValue.GetScheduleLink">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsScheduleValue.ScheduleLink">
      <summary>For internal use only</summary>
    </member>
    <member name="M:zenOn.PfsScheduleValue.SetScheduleLink">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.PfsScheduleValues" />
    <member name="P:zenOn.PfsScheduleValues.Count" />
    <member name="P:zenOn.PfsScheduleValues.Parent" />
    <member name="P:zenOn.PfsScheduleValues.Session" />
    <member name="M:zenOn.PfsScheduleValues.CreateValue">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsScheduleValues.DeleteValue">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsScheduleValues.Item">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.PfsSwitchingPoint" />
    <member name="P:zenOn.PfsSwitchingPoint.Active">
      <summary>If the switching point is to be executed</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPoint.ExecutionTime">
      <summary>Time on which the schedule value is executed</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPoint.ScheduleValue">
      <summary>Schedule value to be executed at the execution time</summary>
    </member>
    <member name="T:zenOn.PfsSwitchingPointFilter" />
    <member name="P:zenOn.PfsSwitchingPointFilter.EndTime">
      <summary>End of the timeframe in which we search</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.Function">
      <summary>Filter string for the names of the functions that are triggered by the schedule values</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.Schedule">
      <summary>Filter string for the names of the schedules that are to be searched</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.SearchData">
      <summary>Data that is to be searched. The locally edited version or the stored one</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.StartTime">
      <summary>Start of the time frame in which we search</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.TimeModelGroup">
      <summary>Filter string for the names of the time model groups that are to be searched</summary>
    </member>
    <member name="P:zenOn.PfsSwitchingPointFilter.Variable">
      <summary>Filter string for the names of variables that are set by the schedule values</summary>
    </member>
    <member name="M:zenOn.PfsSwitchingPointFilter.SwitchingPointPreview">
      <summary>Returns an array of switching points that match the filter</summary>
    </member>
    <member name="T:zenOn.PfsTimeModell" />
    <member name="P:zenOn.PfsTimeModell.Guid" />
    <member name="P:zenOn.PfsTimeModell.KeyNote" />
    <member name="P:zenOn.PfsTimeModell.Name" />
    <member name="P:zenOn.PfsTimeModell.Parent" />
    <member name="P:zenOn.PfsTimeModell.Session" />
    <member name="M:zenOn.PfsTimeModell.AddToDay">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModell.IsDefaultDay">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModell.IsOnDay" />
    <member name="M:zenOn.PfsTimeModell.RemoveFromDay">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModell.Rename">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModell.SetDefaultDay">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModell.Shifts">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.PfsTimeModells" />
    <member name="P:zenOn.PfsTimeModells.Count" />
    <member name="P:zenOn.PfsTimeModells.Parent" />
    <member name="P:zenOn.PfsTimeModells.Session" />
    <member name="M:zenOn.PfsTimeModells.CreateModell">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModells.DeleteModell">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PfsTimeModells.Item">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.PictureFilter" />
    <member name="M:zenOn.PictureFilter.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PictureFilter.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PictureFilter.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PictureFilter.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.PictureFilter.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.Project" />
    <member name="P:zenOn.Project.FontLists">
      <summary>Returns the FontList object.</summary>
    </member>
    <member name="P:zenOn.Project.Guid">
      <summary>Returns the unique Project guid(Read Only).</summary>
    </member>
    <member name="P:zenOn.Project.IsGlobal" />
    <member name="P:zenOn.Project.IsNet" />
    <member name="P:zenOn.Project.LanguageTable">
      <summary>Returns the Language Table</summary>
    </member>
    <member name="P:zenOn.Project.MessageControl">
      <summary>Returns the MessageControl object.</summary>
    </member>
    <member name="P:zenOn.Project.Name" />
    <member name="P:zenOn.Project.NetType" />
    <member name="P:zenOn.Project.Parent" />
    <member name="P:zenOn.Project.Path" />
    <member name="P:zenOn.Project.RemoteTransport">
      <summary>Returns the remote transport object.</summary>
    </member>
    <member name="P:zenOn.Project.Scheduler">
      <summary>The scheduler object</summary>
    </member>
    <member name="P:zenOn.Project.ScreenHeight">
      <summary>Sets the height of the screen (Editor Only).</summary>
    </member>
    <member name="P:zenOn.Project.ScreenWidth">
      <summary>Sets the width of the screen (Editor Only).</summary>
    </member>
    <member name="P:zenOn.Project.ShiftManagement">
      <summary>The shift management object</summary>
    </member>
    <member name="P:zenOn.Project.StyleManager">
      <summary>Returns the StyleManager object</summary>
    </member>
    <member name="P:zenOn.Project.Symbols">
      <summary>Returns the Symbols object.</summary>
    </member>
    <member name="P:zenOn.Project.TextListManager">
      <summary>Returns the TextListManager object</summary>
    </member>
    <member name="P:zenOn.Project.Units">
      <summary>Returns the Units object.</summary>
    </member>
    <member name="M:zenOn.Project.Alarm">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.ALCEngine">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Archives">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.ArchivesED">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.BatchManager">
      <summary>Returns the BatchManager object</summary>
    </member>
    <member name="M:zenOn.Project.Build">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Cel">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Project.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Project.ColorPalettes">
      <summary>Return the ColorPalettes object.</summary>
    </member>
    <member name="M:zenOn.Project.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Decompile">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Drivers">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.DynPictures">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Project.FileManager">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Project.Interlockings">
      <summary>Returns the Interlockings object.</summary>
    </member>
    <member name="M:zenOn.Project.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Project.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Project.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Project.ModulePath [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.ModulePath [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.NetSend">
      <summary>By use of this methode, VBA-Data can be send to another System</summary>
    </member>
    <member name="M:zenOn.Project.OnlineVariables">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.ParentProject">
      <summary>Sets the parent project of the current project.</summary>
    </member>
    <member name="M:zenOn.Project.Passwords">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Pfs">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Recipes">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Reload" />
    <member name="M:zenOn.Project.Remas" />
    <member name="M:zenOn.Project.ReplaceLinks">
      <summary>Replaces project links to 'bsSource' with 'bsTarget'.</summary>
    </member>
    <member name="M:zenOn.Project.RGMGroups" />
    <member name="M:zenOn.Project.RtFunctions" />
    <member name="M:zenOn.Project.SapFunctions" />
    <member name="M:zenOn.Project.Scripts" />
    <member name="M:zenOn.Project.SetUserPropertyStrings">
      <summary>With this methode the Strings for the UserProperties (Rema and Limits) can be set</summary>
    </member>
    <member name="M:zenOn.Project.String" />
    <member name="M:zenOn.Project.SystemModelManager">
      <summary>Return the SystemModelManager object.</summary>
    </member>
    <member name="M:zenOn.Project.Tasks" />
    <member name="M:zenOn.Project.Templates" />
    <member name="M:zenOn.Project.TimeFunctions">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Project.VarAssignments">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.Variables">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.VarTypes">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Project.ZenMenus">
      <summary>-</summary>
    </member>
    <member name="E:zenOn.Project.Active" />
    <member name="E:zenOn.Project.FirePostReload" />
    <member name="E:zenOn.Project.FirePreReload" />
    <member name="E:zenOn.Project.Inactive" />
    <member name="E:zenOn.Project.OnMessageSetDestination">
      <summary>Fired before a message is send.</summary>
    </member>
    <member name="E:zenOn.Project.OnNetReceive">
      <summary>This event is fired when NetData is received, it contains the Data-Source, an Id and the actual Data</summary>
    </member>
    <member name="E:zenOn.Project.OnPostVSTAUpdate">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.OnPreVSTADebugStart">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.OnPreVSTADebugStop">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.OnPreVSTAUpdate">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.OnVSTADebugStart">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.OnVSTADebugStopped">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.Project.SbToServer" />
    <member name="E:zenOn.Project.ServerToSb" />
    <member name="T:zenOn.Projects" />
    <member name="P:zenOn.Projects.Count" />
    <member name="P:zenOn.Projects.CountHidden">
      <summary>For internal use only</summary>
    </member>
    <member name="P:zenOn.Projects.Parent" />
    <member name="M:zenOn.Projects.Create">
      <summary>Shows the dialog to create a new project and/or workspace.</summary>
    </member>
    <member name="M:zenOn.Projects.CreateEx">
      <summary>Creates a new project without dialog.</summary>
    </member>
    <member name="M:zenOn.Projects.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Projects.ItemHidden">
      <summary>For internal use only</summary>
    </member>
    <member name="T:zenOn.PropParam" />
    <member name="P:zenOn.PropParam.Enabled">
      <summary>Returns whether or not the property is enabled.</summary>
    </member>
    <member name="P:zenOn.PropParam.OptionCount">
      <summary>Returns the amount of options.</summary>
    </member>
    <member name="M:zenOn.PropParam.OptionText">
      <summary>Returns the text of the option at the given index</summary>
    </member>
    <member name="M:zenOn.PropParam.OptionValue">
      <summary>Returns the value of the option at the given index</summary>
    </member>
    <member name="T:zenOn.Recipe" />
    <member name="P:zenOn.Recipe.Count" />
    <member name="P:zenOn.Recipe.Name" />
    <member name="P:zenOn.Recipe.Parent" />
    <member name="M:zenOn.Recipe.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.Recipe.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.Recipe.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Recipe.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Recipe.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Recipe.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Recipe.ExecuteValues">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Recipe.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Recipe.ExportXML">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Recipe.ImportXML">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Recipe.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.Recipe.ReadValues">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Recipe.Save">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Recipes" />
    <member name="P:zenOn.Recipes.Count" />
    <member name="P:zenOn.Recipes.Parent" />
    <member name="M:zenOn.Recipes.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.Recipes.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.Recipes.ExportXML">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Recipes.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Recipes.ImportXML">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Recipes.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Recipes.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.Recipes.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.Recipes.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.RecipeValue" />
    <member name="P:zenOn.RecipeValue.Parent" />
    <member name="P:zenOn.RecipeValue.Type" />
    <member name="P:zenOn.RecipeValue.Value" />
    <member name="M:zenOn.RecipeValue.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RecipeValue.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RecipeValue.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RecipeValue.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.RecipeValue.ItemVariable">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Rema" />
    <member name="P:zenOn.Rema.IsAlarm" />
    <member name="P:zenOn.Rema.IsBTB" />
    <member name="P:zenOn.Rema.IsFunction" />
    <member name="P:zenOn.Rema.IsFunctionClient" />
    <member name="P:zenOn.Rema.IsFunctionServer" />
    <member name="P:zenOn.Rema.IsStateBlinking" />
    <member name="P:zenOn.Rema.Name" />
    <member name="P:zenOn.Rema.Parent" />
    <member name="P:zenOn.Rema.StateCount" />
    <member name="P:zenOn.Rema.Status" />
    <member name="P:zenOn.Rema.Type" />
    <member name="M:zenOn.Rema.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.CreateState">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.DeleteState">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Rema.GetColor">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.GetDelayZeit">
      <summary>For internal use only</summary>
    </member>
    <member name="M:zenOn.Rema.GetStatus">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.GetText">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsAlarm">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsBTB">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsFunction">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsFunctionClient">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsFunctionServer">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateIsStateBlinking">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Rema.StateItem">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Remas" />
    <member name="P:zenOn.Remas.Count">
      <summary>Count of remas</summary>
    </member>
    <member name="P:zenOn.Remas.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.Remas.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.Create">
      <summary>Creates a new rema (unique name)</summary>
    </member>
    <member name="M:zenOn.Remas.Delete">
      <summary>Delete the given rema</summary>
    </member>
    <member name="M:zenOn.Remas.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Remas.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Remas.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Remas.Item">
      <summary>Returns the rema on the given position or name</summary>
    </member>
    <member name="M:zenOn.Remas.ItemById">
      <summary>Returns the rema with the given id</summary>
    </member>
    <member name="M:zenOn.Remas.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.Remas.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.RemoteTransport" />
    <member name="P:zenOn.RemoteTransport.CEFolder">
      <summary>Get/Set the CE folder.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.CustomCount">
      <summary>Returns the amount of custom entries.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.HidePasswordDialog">
      <summary>Get/Set whether the password dialog is shown.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeAdditional">
      <summary>Get/Set whether the Additional folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeDrivers">
      <summary>Get/Set whether the Drivers folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeGraphics">
      <summary>Get/Set whether the Graphic folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeHelp">
      <summary>Get/Set whether the Help folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeLists">
      <summary>Get/Set whether the Lists folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeMedia">
      <summary>Get/Set whether the Media folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeReports">
      <summary>Get/Set whether the Reports folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.IncludeStraton">
      <summary>Get/Set whether the Straton folder is to be transported.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.Password">
      <summary>Get/Set the connection password.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.ProjectBase">
      <summary>Get/Set the project base.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.SerialName">
      <summary>Get/Set the Serial connection address.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.TcpIpName">
      <summary>Get/Set the TCP Name.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.TransportType">
      <summary>Get/Set the connection type.</summary>
    </member>
    <member name="P:zenOn.RemoteTransport.UseCEFolderSetting">
      <summary>Get/Set whether the CE folder setting is to be used.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.Connect">
      <summary>Start a remote transport connection.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.CreateCustom">
      <summary>Adds a new custom entry.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.CustomItem">
      <summary>Returns the custom entry at the given index.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.DeleteCustom">
      <summary>Deletes the custom entry at the given index.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.DeleteCustomTransportItem" />
    <member name="M:zenOn.RemoteTransport.Disconnect">
      <summary>Stop the current remote transport connection.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.RebootOS">
      <summary>Reboots the remote OS.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.ReloadRT">
      <summary>Reload the remote runtime.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.Retrieve">
      <summary>Retrieve all.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.Save">
      <summary>Saves current remote transport setting.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.Save2" />
    <member name="M:zenOn.RemoteTransport.SetStartProject">
      <summary>Set start project.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.StartRT">
      <summary>Start the remote runtime.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.StopRT">
      <summary>Stop the remote runtime.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.TransferAll">
      <summary>Transfer all.</summary>
    </member>
    <member name="M:zenOn.RemoteTransport.TransferChanged">
      <summary>Transfer changes.</summary>
    </member>
    <member name="T:zenOn.RemoteTransportCustom" />
    <member name="P:zenOn.RemoteTransportCustom.ActionType">
      <summary>Get/Set the action type.</summary>
    </member>
    <member name="P:zenOn.RemoteTransportCustom.Active">
      <summary>Activate/deactivate the custom entry.</summary>
    </member>
    <member name="P:zenOn.RemoteTransportCustom.Comment">
      <summary>Get/Set the comment of the custom entry.</summary>
    </member>
    <member name="P:zenOn.RemoteTransportCustom.SourcePath">
      <summary>Get/Set the source path.</summary>
    </member>
    <member name="P:zenOn.RemoteTransportCustom.TargetPath">
      <summary>Get/Set the target path.</summary>
    </member>
    <member name="T:zenOn.RGMRecipe" />
    <member name="P:zenOn.RGMRecipe.Name">
      <summary>The name of the recipe</summary>
    </member>
    <member name="P:zenOn.RGMRecipe.Number">
      <summary>The identification number of the recipe</summary>
    </member>
    <member name="P:zenOn.RGMRecipe.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="P:zenOn.RGMRecipe.Status">
      <summary>The numeric status value of the recipe</summary>
    </member>
    <member name="P:zenOn.RGMRecipe.ValueCount" />
    <member name="P:zenOn.RGMRecipe.Version">
      <summary>The version of the recipe</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Check">
      <summary>Get differences between recipe and actual values</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Duplicate">
      <summary>Duplicate this recipe</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.DuplicateAsVersion">
      <summary>Duplicate this recipe into a new version</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Execute">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.ExportXML">
      <summary>Export the data of this recipe to a xml file for documentation purpose</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Read">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.Save">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipe.ValueItem">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.RGMRecipeGroup" />
    <member name="P:zenOn.RGMRecipeGroup.Name" />
    <member name="P:zenOn.RGMRecipeGroup.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="P:zenOn.RGMRecipeGroup.RecipeCount" />
    <member name="P:zenOn.RGMRecipeGroup.VariableCount" />
    <member name="M:zenOn.RGMRecipeGroup.AddBulk">
      <summary>Adds a bulk of variables to the RGM</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.AddVariable">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.CreateRecipe">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.CreateRecipeVersion">
      <summary>Creates a new recipe version for the given recipe name</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DeleteRecipe">
      <summary>Delete a recipe object by name OR by nummeric index (for name all recipe versions are deleted)</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DeleteRecipeVersion">
      <summary>Delete a recipe object by name and version OR by nummeric index (for indexes the version is ignored)</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DeleteVariable">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.Duplicate">
      <summary>Duplicate this recipe group</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.ListRecipeInfo">
      <summary>Returns a list containing the name, number, version and status of all recipes in the group.</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.ListRecipesName">
      <summary>Passes an array with all recipes name of this group</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.ListRecipeVersions">
      <summary>Passes an array with all versions of a specified recipe</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.ListVariablesName">
      <summary>List all variable names from this group</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.RecipeItem">
      <summary>Get a recipe object by name OR by nummeric index (for name the lowest version is returned)</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.RecipeItemVersion">
      <summary>Get a recipe object by name and version OR by nummeric index (for indexes the version is ignored)</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.RenameRecipe">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.ReorderVariables">
      <summary>Reorders the variables in the group</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.Save">
      <summary>Save the Recipegroup and all Recipegroup Variables</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroup.VariableItem">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.RGMRecipeGroups" />
    <member name="P:zenOn.RGMRecipeGroups.Count" />
    <member name="P:zenOn.RGMRecipeGroups.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.CreateGroup">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.DeleteGroup">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.RenameGroup">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.RGMRecipeGroups.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeCreate">
      <summary>A new recipe is going to be created</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeCreated">
      <summary>A new recipe was created (from the RGM MDI screen).</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeDelete">
      <summary>A recipe is going to be deleted</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeDuplicate">
      <summary>A recipe is going to be created as a duplicate</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeDuplicated">
      <summary>A recipe was created (from the RGM MDI screen) as a duplicate.</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeImportingByXml" />
    <member name="E:zenOn.RGMRecipeGroups.RecipeRename">
      <summary>A recipe is going to be renamed</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.RecipeXMLImport">
      <summary>A recipe is going to be imported from a XML file.</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.StatusChange">
      <summary>A recipe status is going to be changed</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionCreate">
      <summary>A new recipe version is going to be created</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionCreated">
      <summary>A new recipe version was created (from the RGM MDI screen).</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionDelete">
      <summary>A recipe version is going to be deleted</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionDuplicate">
      <summary>A recipe version is going to be created as a duplicate</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionDuplicated">
      <summary>A recipe version was created (from the RGM MDI screen) as a duplicate</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionDuplicatedRead">
      <summary>A recipe version was created (from the RGM MDI screen) as a duplicate and read from the PLC</summary>
    </member>
    <member name="E:zenOn.RGMRecipeGroups.VersionDuplicateRead">
      <summary>A recipe version is going to be created as a duplicate and read</summary>
    </member>
    <member name="T:zenOn.RGMRecipeValue" />
    <member name="P:zenOn.RGMRecipeValue.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="P:zenOn.RGMRecipeValue.VarName">
      <summary>Name of the Variable</summary>
    </member>
    <member name="M:zenOn.RGMRecipeValue.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeValue.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeValue.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeValue.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.RGMRecipeVar" />
    <member name="P:zenOn.RGMRecipeVar.Name">
      <summary>Name of the Variable</summary>
    </member>
    <member name="P:zenOn.RGMRecipeVar.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="M:zenOn.RGMRecipeVar.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeVar.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeVar.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RGMRecipeVar.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.RtFunction" />
    <member name="P:zenOn.RtFunction.Actual" />
    <member name="P:zenOn.RtFunction.Client" />
    <member name="P:zenOn.RtFunction.ID" />
    <member name="P:zenOn.RtFunction.Name" />
    <member name="P:zenOn.RtFunction.ParamString" />
    <member name="P:zenOn.RtFunction.Parent" />
    <member name="P:zenOn.RtFunction.Server" />
    <member name="P:zenOn.RtFunction.StandBy" />
    <member name="P:zenOn.RtFunction.Type" />
    <member name="M:zenOn.RtFunction.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.Copy">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.RtFunction.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.RtFunction.Parameter">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.Start">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.RtFunction.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.RtFunctions" />
    <member name="P:zenOn.RtFunctions.Count">
      <summary>Returns count of the elements</summary>
    </member>
    <member name="P:zenOn.RtFunctions.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="M:zenOn.RtFunctions.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.RtFunctions.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.RtFunctions.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.RtFunctions.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.RtFunctions.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.RtFunctions.ShowCreateDialog">
      <summary>Opens the zenon standard dialog "Select a function".</summary>
    </member>
    <member name="M:zenOn.RtFunctions.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="E:zenOn.RtFunctions.PreFunctionExecute">
      <summary>This event is fired when a function is executed and containes a copy of the function.</summary>
    </member>
    <member name="T:zenOn.SapFunction" />
    <member name="P:zenOn.SapFunction.Activity">
      <summary>Activity state of the function call (0 = inactive, 1 = in queue, 2 = call in progress)</summary>
    </member>
    <member name="P:zenOn.SapFunction.ErrorCode">
      <summary>Code for result of last call</summary>
    </member>
    <member name="P:zenOn.SapFunction.ErrorText">
      <summary>Short text for result of last call</summary>
    </member>
    <member name="P:zenOn.SapFunction.LastError">
      <summary>Last Error</summary>
    </member>
    <member name="P:zenOn.SapFunction.Name">
      <summary>Name of the SAP function</summary>
    </member>
    <member name="P:zenOn.SapFunction.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapFunction.Call">
      <summary>Calls the SAP function synchronously</summary>
    </member>
    <member name="M:zenOn.SapFunction.CallAsync">
      <summary>Calls the SAP function asynchronously</summary>
    </member>
    <member name="M:zenOn.SapFunction.Parameters">
      <summary>Returns the SAP parameters collection</summary>
    </member>
    <member name="M:zenOn.SapFunction.StartServer">
      <summary>Starts the SAP function as server program to be called from SAP</summary>
    </member>
    <member name="M:zenOn.SapFunction.StopServer">
      <summary>Stops the server program</summary>
    </member>
    <member name="M:zenOn.SapFunction.Tables">
      <summary>Returns the SAP tables collection</summary>
    </member>
    <member name="E:zenOn.SapFunction.ActivityChanged">
      <summary>Activity state of the function call has changed</summary>
    </member>
    <member name="E:zenOn.SapFunction.CallFinished">
      <summary>SAP function returns from asynchronous call</summary>
    </member>
    <member name="E:zenOn.SapFunction.ServerCall">
      <summary>Server program called by SAP</summary>
    </member>
    <member name="T:zenOn.SapFunctions" />
    <member name="P:zenOn.SapFunctions.Count">
      <summary>Count of defined SAP functions</summary>
    </member>
    <member name="P:zenOn.SapFunctions.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapFunctions.CreateSapFunction">
      <summary>Creates a new SAP function (unique name)</summary>
    </member>
    <member name="M:zenOn.SapFunctions.DeleteSapFunction">
      <summary>Deletes the given SAP function</summary>
    </member>
    <member name="M:zenOn.SapFunctions.Item">
      <summary>Returns the SAP function by name or position</summary>
    </member>
    <member name="T:zenOn.SapParameter" />
    <member name="P:zenOn.SapParameter.Default">
      <summary>SAP parameter has a default value (TRUE/FALSE)</summary>
    </member>
    <member name="P:zenOn.SapParameter.Name">
      <summary>Name of the SAP parameter</summary>
    </member>
    <member name="P:zenOn.SapParameter.Optional">
      <summary>SAP parameter is optional (TRUE/FALSE)</summary>
    </member>
    <member name="P:zenOn.SapParameter.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.SapParameter.RawData">
      <summary>Returns the raw Data of the SAP parameter in a delimited string</summary>
    </member>
    <member name="M:zenOn.SapParameter.Value [GET]">
      <summary>Value of the SAP parameter</summary>
    </member>
    <member name="M:zenOn.SapParameter.Value [PUT]">
      <summary>Sets  the values for the SAP parameter</summary>
    </member>
    <member name="T:zenOn.SapParameters" />
    <member name="P:zenOn.SapParameters.Count">
      <summary>Count of defined SAP parameters</summary>
    </member>
    <member name="P:zenOn.SapParameters.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapParameters.CreateSapParameter">
      <summary>Creates a new SAP parameter (unique name)</summary>
    </member>
    <member name="M:zenOn.SapParameters.DeleteSapParameter">
      <summary>Deletes the given SAP parameter</summary>
    </member>
    <member name="M:zenOn.SapParameters.Item">
      <summary>Returns the SAP parameter by name or position</summary>
    </member>
    <member name="T:zenOn.SapRow" />
    <member name="P:zenOn.SapRow.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.SapRow.RawData">
      <summary>Returns the raw Data of the SAP row in a delimited string</summary>
    </member>
    <member name="M:zenOn.SapRow.Value [GET]">
      <summary>Value of the SAP row / column</summary>
    </member>
    <member name="M:zenOn.SapRow.Value [PUT]">
      <summary>Value of the SAP row / column</summary>
    </member>
    <member name="T:zenOn.SapRows" />
    <member name="P:zenOn.SapRows.Count">
      <summary>Count of defined SAP rows in the table</summary>
    </member>
    <member name="P:zenOn.SapRows.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapRows.AppendSapRow">
      <summary>Appends a new SAP row at the end of the table</summary>
    </member>
    <member name="M:zenOn.SapRows.DeleteSapRow">
      <summary>Deletes the SAP row at the given index</summary>
    </member>
    <member name="M:zenOn.SapRows.InsertSapRow">
      <summary>Inserts a new SAP row at the given index</summary>
    </member>
    <member name="M:zenOn.SapRows.Item">
      <summary>Returns the SAP row at the given index</summary>
    </member>
    <member name="T:zenOn.SapTable" />
    <member name="P:zenOn.SapTable.Name">
      <summary>Name of the SAP table</summary>
    </member>
    <member name="P:zenOn.SapTable.Optional">
      <summary>SAP table is optional (TRUE/FALSE)</summary>
    </member>
    <member name="P:zenOn.SapTable.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapTable.Clear">
      <summary>Deletes all rows in the table</summary>
    </member>
    <member name="M:zenOn.SapTable.Rows">
      <summary>Returns the collection of the rows in the table</summary>
    </member>
    <member name="T:zenOn.SapTables" />
    <member name="P:zenOn.SapTables.Count">
      <summary>Count of defined SAP tables</summary>
    </member>
    <member name="P:zenOn.SapTables.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.SapTables.CreateSapTable">
      <summary>Creates a new SAP table (unique name)</summary>
    </member>
    <member name="M:zenOn.SapTables.DeleteSapTable">
      <summary>Deletes the given SAP table</summary>
    </member>
    <member name="M:zenOn.SapTables.Item">
      <summary>Returns the SAP table by name or position</summary>
    </member>
    <member name="T:zenOn.ScheduleCustomPeriod" />
    <member name="P:zenOn.ScheduleCustomPeriod.EndDate">
      <summary>End Date of a Custom Period</summary>
    </member>
    <member name="P:zenOn.ScheduleCustomPeriod.StartDate">
      <summary>Start Date of a Custom Period</summary>
    </member>
    <member name="P:zenOn.ScheduleCustomPeriod.SwitchingPeriods">
      <summary>Collection of Switching Periods in a Custom Period</summary>
    </member>
    <member name="P:zenOn.ScheduleCustomPeriod.SwitchingPoints">
      <summary>Collection of Switching Points in a Custom Period</summary>
    </member>
    <member name="T:zenOn.ScheduleFunction" />
    <member name="P:zenOn.ScheduleFunction.Active">
      <summary>Returns TRUE if the Action of a Function is Active</summary>
    </member>
    <member name="P:zenOn.ScheduleFunction.Function">
      <summary>Defines a Function in a Switching Point</summary>
    </member>
    <member name="T:zenOn.ScheduleFunctions" />
    <member name="P:zenOn.ScheduleFunctions.Count" />
    <member name="M:zenOn.ScheduleFunctions.Create" />
    <member name="M:zenOn.ScheduleFunctions.Delete" />
    <member name="M:zenOn.ScheduleFunctions.Item" />
    <member name="T:zenOn.ScheduleGroup" />
    <member name="P:zenOn.ScheduleGroup.Name">
      <summary>Schedule Group Name</summary>
    </member>
    <member name="P:zenOn.ScheduleGroup.Schedules">
      <summary>Collection of Schedules in a Schedule Group</summary>
    </member>
    <member name="T:zenOn.ScheduleGroups" />
    <member name="P:zenOn.ScheduleGroups.Count">
      <summary>Returns the Count of Schedule Groups</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.Create">
      <summary>Creates a Schedule Group</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.DeleteByIndex">
      <summary>Deletes a Schedule Group via Index</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.DeleteByName">
      <summary>Deletes a Schedule Group via Name</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.DuplicateByIndex">
      <summary>Duplicates a Schedule Group via Index</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.DuplicateByName">
      <summary>Duplicates a Schedule Group via Name</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.GetItem">
      <summary>Returns a Schedule Group via Index</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.GetItemByName">
      <summary>Returns a Schedule Group via Name</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.RenameByIndex">
      <summary>Renames a Schedule Group via Index</summary>
    </member>
    <member name="M:zenOn.ScheduleGroups.RenameByName">
      <summary>Renames a Schedule Group via Name</summary>
    </member>
    <member name="T:zenOn.Scheduler" />
    <member name="P:zenOn.Scheduler.ScheduleGroups">
      <summary>Collection of Schedule Groups</summary>
    </member>
    <member name="M:zenOn.Scheduler.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Scheduler.Save">
      <summary>Saves the changes made to the Scheduler</summary>
    </member>
    <member name="M:zenOn.Scheduler.Undo">
      <summary>Undo changes made to the Scheduler since the last Save</summary>
    </member>
    <member name="M:zenOn.Scheduler.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.Schedules" />
    <member name="P:zenOn.Schedules.CustomPeriodCount">
      <summary>Returns the Count of Custom Periods</summary>
    </member>
    <member name="M:zenOn.Schedules.CreateCustomPeriod">
      <summary>Creates a Custom Period</summary>
    </member>
    <member name="M:zenOn.Schedules.DeleteCustomPeriod">
      <summary>Deletes a Custom Period</summary>
    </member>
    <member name="M:zenOn.Schedules.GetCustomPeriod">
      <summary>Returns a Custom Period via Index</summary>
    </member>
    <member name="M:zenOn.Schedules.GetStandardDay">
      <summary>Returns a Standard Day via enum</summary>
    </member>
    <member name="T:zenOn.ScheduleStandardDay" />
    <member name="P:zenOn.ScheduleStandardDay.SwitchingPeriods">
      <summary>Collection of Switching Periods in a Standard Day</summary>
    </member>
    <member name="P:zenOn.ScheduleStandardDay.SwitchingPoints">
      <summary>Collection of Switching Points in a Standard Day</summary>
    </member>
    <member name="P:zenOn.ScheduleStandardDay.Type">
      <summary>Standard Day type</summary>
    </member>
    <member name="T:zenOn.ScheduleSwitchingPeriod" />
    <member name="P:zenOn.ScheduleSwitchingPeriod.End">
      <summary>Switching Point at the End of the Period</summary>
    </member>
    <member name="P:zenOn.ScheduleSwitchingPeriod.Start">
      <summary>Switching Point at the Start of the Period</summary>
    </member>
    <member name="T:zenOn.ScheduleSwitchingPeriods" />
    <member name="P:zenOn.ScheduleSwitchingPeriods.Count">
      <summary>Returns the Count of Switching Periods</summary>
    </member>
    <member name="M:zenOn.ScheduleSwitchingPeriods.Create">
      <summary>Creates a new Switching Period</summary>
    </member>
    <member name="M:zenOn.ScheduleSwitchingPeriods.Delete">
      <summary>Deletes a Switching Period</summary>
    </member>
    <member name="M:zenOn.ScheduleSwitchingPeriods.Item">
      <summary>Returns a Switching Period</summary>
    </member>
    <member name="T:zenOn.ScheduleSwitchingPoint" />
    <member name="P:zenOn.ScheduleSwitchingPoint.Functions">
      <summary>Collection of Functions in a Switching Point</summary>
    </member>
    <member name="P:zenOn.ScheduleSwitchingPoint.Time">
      <summary>Switching Point execution Time</summary>
    </member>
    <member name="P:zenOn.ScheduleSwitchingPoint.Variables">
      <summary>Collection of Variables in a Switching Point</summary>
    </member>
    <member name="T:zenOn.ScheduleSwitchingPoints" />
    <member name="P:zenOn.ScheduleSwitchingPoints.Count" />
    <member name="M:zenOn.ScheduleSwitchingPoints.Create" />
    <member name="M:zenOn.ScheduleSwitchingPoints.Delete" />
    <member name="M:zenOn.ScheduleSwitchingPoints.Item" />
    <member name="T:zenOn.ScheduleVariable" />
    <member name="P:zenOn.ScheduleVariable.Active">
      <summary>Returns TRUE if the Action of a Variable is Active</summary>
    </member>
    <member name="P:zenOn.ScheduleVariable.SetValue">
      <summary>Defines the Value of a Variable</summary>
    </member>
    <member name="P:zenOn.ScheduleVariable.Variable" />
    <member name="T:zenOn.ScheduleVariables" />
    <member name="P:zenOn.ScheduleVariables.Count">
      <summary>Returns the Count of Variables in a Switching Point</summary>
    </member>
    <member name="M:zenOn.ScheduleVariables.Create">
      <summary>Creates a Variable in a Switching Point</summary>
    </member>
    <member name="M:zenOn.ScheduleVariables.Delete">
      <summary>Deletes a Variable in a Switching Point</summary>
    </member>
    <member name="M:zenOn.ScheduleVariables.Item">
      <summary>Returns a Variable in a Switching Point</summary>
    </member>
    <member name="T:zenOn.Script" />
    <member name="P:zenOn.Script.Count" />
    <member name="P:zenOn.Script.Name" />
    <member name="P:zenOn.Script.Parent" />
    <member name="M:zenOn.Script.Add">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Script.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Script.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Script.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Script.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Script.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Script.Remove">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Scripts" />
    <member name="P:zenOn.Scripts.Count">
      <summary>-</summary>
    </member>
    <member name="P:zenOn.Scripts.Parent">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.Create">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.Delete">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Scripts.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Scripts.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Scripts.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Scripts.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Scripts.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.Scripts.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.SelectionChangedEventParameter" />
    <member name="P:zenOn.SelectionChangedEventParameter.SelectionKind">
      <summary>Kind of the selection for the changed selection event in a calendar view</summary>
    </member>
    <member name="P:zenOn.SelectionChangedEventParameter.SelectionPicture">
      <summary>Picture for the changed selection event in a calendar view</summary>
    </member>
    <member name="T:zenOn.SelectionRange" />
    <member name="P:zenOn.SelectionRange.EndTime">
      <summary>The selection end time</summary>
    </member>
    <member name="P:zenOn.SelectionRange.StartTime">
      <summary>The selection start time</summary>
    </member>
    <member name="T:zenOn.Shift" />
    <member name="P:zenOn.Shift.Breaks">
      <summary>Returns the shift breaks object</summary>
    </member>
    <member name="P:zenOn.Shift.Description">
      <summary>The shift description</summary>
    </member>
    <member name="P:zenOn.Shift.EndTime">
      <summary>The shift end time</summary>
    </member>
    <member name="P:zenOn.Shift.Name">
      <summary>The shift name</summary>
    </member>
    <member name="P:zenOn.Shift.StartTime">
      <summary>The shift start time</summary>
    </member>
    <member name="P:zenOn.Shift.SystemModelGroups">
      <summary>String containing a list of all linked system model groups</summary>
    </member>
    <member name="P:zenOn.Shift.UseHierarchicEquipmentGroups" />
    <member name="M:zenOn.Shift.Delete">
      <summary>Delete shift</summary>
    </member>
    <member name="M:zenOn.Shift.Save">
      <summary>Save shift</summary>
    </member>
    <member name="M:zenOn.Shift.ShiftUserCollection [GET]">
      <summary>Returns the shift users collection object</summary>
    </member>
    <member name="T:zenOn.ShiftBreak" />
    <member name="P:zenOn.ShiftBreak.EndTime">
      <summary>The shift break end time</summary>
    </member>
    <member name="P:zenOn.ShiftBreak.Name">
      <summary>The shift break name</summary>
    </member>
    <member name="P:zenOn.ShiftBreak.StartTime">
      <summary>The shift break start time</summary>
    </member>
    <member name="M:zenOn.ShiftBreak.Delete">
      <summary>Delete shift break</summary>
    </member>
    <member name="T:zenOn.ShiftBreaks" />
    <member name="P:zenOn.ShiftBreaks.Count">
      <summary>The amount of shift breaks</summary>
    </member>
    <member name="M:zenOn.ShiftBreaks.CreateBreak">
      <summary>Returns a new unsaved shift break object</summary>
    </member>
    <member name="M:zenOn.ShiftBreaks.GetItem">
      <summary>Returns a shift break from the list</summary>
    </member>
    <member name="T:zenOn.ShiftCalendar" />
    <member name="M:zenOn.ShiftCalendar.CreateShift">
      <summary>Returns a new unsaved shift object</summary>
    </member>
    <member name="M:zenOn.ShiftCalendar.CreateShiftFilter">
      <summary>Returns the shift filter object</summary>
    </member>
    <member name="M:zenOn.ShiftCalendar.CreateShiftModelInsertSettings">
      <summary>Returns a new insert settings object</summary>
    </member>
    <member name="M:zenOn.ShiftCalendar.GetSelectionRange">
      <summary>Returns the selection time range of a calendar view</summary>
    </member>
    <member name="M:zenOn.ShiftCalendar.GetSelectionShifts">
      <summary>Returns the selected shifts of a calendar view</summary>
    </member>
    <member name="M:zenOn.ShiftCalendar.InsertShiftModel">
      <summary>Inserts a shift model accordings to the given settings</summary>
    </member>
    <member name="E:zenOn.ShiftCalendar.Created">
      <summary>Event about a created shift in the calendar</summary>
    </member>
    <member name="E:zenOn.ShiftCalendar.Deleted">
      <summary>Event about a deleted shift in the calendar</summary>
    </member>
    <member name="E:zenOn.ShiftCalendar.Modified">
      <summary>Event about a modified shift in the calendar</summary>
    </member>
    <member name="E:zenOn.ShiftCalendar.SelectionChanged">
      <summary>Event about the changed selection in a calendar view</summary>
    </member>
    <member name="T:zenOn.ShiftFilter" />
    <member name="P:zenOn.ShiftFilter.EndTime">
      <summary>The shift filter end time</summary>
    </member>
    <member name="P:zenOn.ShiftFilter.StartTime">
      <summary>The shift filter start time</summary>
    </member>
    <member name="P:zenOn.ShiftFilter.SystemModelGroups">
      <summary>String containing a list of system model groups for which the shifts should be filtered</summary>
    </member>
    <member name="M:zenOn.ShiftFilter.GetShifts">
      <summary>Returns the all shifts in the shift calendar that fit the filter configuration</summary>
    </member>
    <member name="T:zenOn.ShiftManagement" />
    <member name="P:zenOn.ShiftManagement.Calendar">
      <summary>The shift calendar object</summary>
    </member>
    <member name="P:zenOn.ShiftManagement.Models">
      <summary>The shift models object</summary>
    </member>
    <member name="T:zenOn.ShiftModel" />
    <member name="P:zenOn.ShiftModel.Description">
      <summary>The shift model description</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Friday">
      <summary>Flag to make inserting on a Friday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Monday">
      <summary>Flag to make inserting on a Monday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Name">
      <summary>The shift model name</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Saturday">
      <summary>Flag to make inserting on a Saturday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Sunday">
      <summary>Flag to make inserting on a Sunday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Thursday">
      <summary>Flag to make inserting on a Thursday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Tuesday">
      <summary>Flag to make inserting on a Tuesday possible</summary>
    </member>
    <member name="P:zenOn.ShiftModel.Wednesday">
      <summary>Flag to make inserting on a Wednesday possible</summary>
    </member>
    <member name="M:zenOn.ShiftModel.IsHolidayEnabled [GET]" />
    <member name="T:zenOn.ShiftModelInsertResult" />
    <member name="P:zenOn.ShiftModelInsertResult.Error">
      <summary>The error information for inserting a shift model</summary>
    </member>
    <member name="T:zenOn.ShiftModelInsertSettings" />
    <member name="P:zenOn.ShiftModelInsertSettings.EndDate">
      <summary>The shift model insert end time</summary>
    </member>
    <member name="P:zenOn.ShiftModelInsertSettings.ShiftModel">
      <summary>The shift model insert shift model template</summary>
    </member>
    <member name="P:zenOn.ShiftModelInsertSettings.StartDate">
      <summary>The shift model insert start time</summary>
    </member>
    <member name="P:zenOn.ShiftModelInsertSettings.SystemModelGroups">
      <summary>The shift model insert equipment model groups</summary>
    </member>
    <member name="P:zenOn.ShiftModelInsertSettings.UseHierarchicEquipmentGroups" />
    <member name="T:zenOn.ShiftModels" />
    <member name="P:zenOn.ShiftModels.Count">
      <summary>The amount of shift models</summary>
    </member>
    <member name="M:zenOn.ShiftModels.GetItem">
      <summary>Returns a shift model from the list</summary>
    </member>
    <member name="T:zenOn.Shifts" />
    <member name="P:zenOn.Shifts.Count">
      <summary>The amount of shifts</summary>
    </member>
    <member name="M:zenOn.Shifts.GetItem">
      <summary>Returns a shift from the list</summary>
    </member>
    <member name="T:zenOn.ShiftUser" />
    <member name="M:zenOn.ShiftUser.Name [GET]">
      <summary>Identification of the shift user</summary>
    </member>
    <member name="T:zenOn.ShiftUserCollection" />
    <member name="M:zenOn.ShiftUserCollection.AddUser">
      <summary>Adds a shift user to the list of shift users</summary>
    </member>
    <member name="M:zenOn.ShiftUserCollection.Count [GET]">
      <summary>The amount of shift users linke to the shift</summary>
    </member>
    <member name="M:zenOn.ShiftUserCollection.GetItem">
      <summary>Returns the shift user</summary>
    </member>
    <member name="M:zenOn.ShiftUserCollection.RemoveUser">
      <summary>Removes a shift user from the list of shift users</summary>
    </member>
    <member name="T:zenOn.ShowCreateDriverDialogResult" />
    <member name="M:zenOn.ShowCreateDriverDialogResult.Driver [GET]" />
    <member name="M:zenOn.ShowCreateDriverDialogResult.Result [GET]" />
    <member name="T:zenOn.ShowCreateFunctionDialogResult" />
    <member name="M:zenOn.ShowCreateFunctionDialogResult.Function [GET]" />
    <member name="M:zenOn.ShowCreateFunctionDialogResult.Result [GET]" />
    <member name="T:zenOn.ShowCreateScreenDialogResult" />
    <member name="M:zenOn.ShowCreateScreenDialogResult.Result [GET]" />
    <member name="M:zenOn.ShowCreateScreenDialogResult.Screen [GET]" />
    <member name="T:zenOn.ShowCreateVariableDialogResult" />
    <member name="M:zenOn.ShowCreateVariableDialogResult.Result [GET]" />
    <member name="M:zenOn.ShowCreateVariableDialogResult.Variable [GET]" />
    <member name="T:zenOn.State" />
    <member name="P:zenOn.State.AllValues" />
    <member name="P:zenOn.State.char Zaehlerindex" />
    <member name="P:zenOn.State.CheckArt" />
    <member name="P:zenOn.State.ClassIdx" />
    <member name="P:zenOn.State.Color" />
    <member name="P:zenOn.State.DelayTime" />
    <member name="P:zenOn.State.Function" />
    <member name="P:zenOn.State.GroupIdx" />
    <member name="P:zenOn.State.Hysterese" />
    <member name="P:zenOn.State.Parent" />
    <member name="P:zenOn.State.ReaAlarm" />
    <member name="P:zenOn.State.ReaAlarmBis" />
    <member name="P:zenOn.State.ReaStatusExt" />
    <member name="P:zenOn.State.ReaStatusFlankeExt" />
    <member name="P:zenOn.State.ReaStatusFlankeStd" />
    <member name="P:zenOn.State.ReaStatusMaskeExt" />
    <member name="P:zenOn.State.ReaStatusMaskeStd" />
    <member name="P:zenOn.State.ReaStatusStd" />
    <member name="P:zenOn.State.ReaWert" />
    <member name="P:zenOn.State.ReaWertFlanke" />
    <member name="P:zenOn.State.ReaWertMaske" />
    <member name="P:zenOn.State.Status" />
    <member name="P:zenOn.State.Text" />
    <member name="P:zenOn.State.TreatAllValueChangesAsNewLimitViolation" />
    <member name="M:zenOn.State.CreateSubState">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.State.GetSubStateCount">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.Move" />
    <member name="M:zenOn.State.MoveSubState">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.State.SubStateItem">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.StyleItem" />
    <member name="P:zenOn.StyleItem.Category">
      <summary>Returns the category of the item.</summary>
    </member>
    <member name="P:zenOn.StyleItem.Count" />
    <member name="P:zenOn.StyleItem.Description" />
    <member name="P:zenOn.StyleItem.ExternalReference">
      <summary>Returns the external reference of the item.</summary>
    </member>
    <member name="P:zenOn.StyleItem.Guid" />
    <member name="P:zenOn.StyleItem.Name" />
    <member name="P:zenOn.StyleItem.ParentItem" />
    <member name="P:zenOn.StyleItem.Type" />
    <member name="M:zenOn.StyleItem.DynProperties [GET]" />
    <member name="M:zenOn.StyleItem.DynProperties [PUT]" />
    <member name="M:zenOn.StyleItem.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.StyleItem.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.StyleItem.Item" />
    <member name="T:zenOn.StyleManager" />
    <member name="P:zenOn.StyleManager.Count" />
    <member name="P:zenOn.StyleManager.Parent" />
    <member name="M:zenOn.StyleManager.CheckIn" />
    <member name="M:zenOn.StyleManager.CheckOut" />
    <member name="M:zenOn.StyleManager.Create" />
    <member name="M:zenOn.StyleManager.CreateGroup" />
    <member name="M:zenOn.StyleManager.Delete">
      <summary>Returns true, if the item was successfully deleted.</summary>
    </member>
    <member name="M:zenOn.StyleManager.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.StyleManager.ExtractStyleGroupFromElement">
      <summary>Returns a new style group from the given element</summary>
    </member>
    <member name="M:zenOn.StyleManager.Get" />
    <member name="M:zenOn.StyleManager.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.StyleManager.IsCheckedOut" />
    <member name="M:zenOn.StyleManager.IsDifferent" />
    <member name="M:zenOn.StyleManager.IsLocked" />
    <member name="M:zenOn.StyleManager.Item" />
    <member name="M:zenOn.StyleManager.UndoCheckOut" />
    <member name="T:zenOn.SymbolElements" />
    <member name="P:zenOn.SymbolElements.Count">
      <summary>Returns count of the elements</summary>
    </member>
    <member name="P:zenOn.SymbolElements.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="M:zenOn.SymbolElements.Add">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.SymbolElements.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.SymbolElements.Remove">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="T:zenOn.Symbols" />
    <member name="P:zenOn.Symbols.SymbolList">
      <summary>Returns a list of available symbols</summary>
    </member>
    <member name="M:zenOn.Symbols.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Symbols.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Symbols.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.SystemModel" />
    <member name="P:zenOn.SystemModel.Count">
      <summary>Count of system groups.</summary>
    </member>
    <member name="M:zenOn.SystemModel.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModel.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModel.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModel.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModel.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.SystemModel.Item">
      <summary>Returns the system group at the given index.</summary>
    </member>
    <member name="T:zenOn.SystemModelGroup" />
    <member name="P:zenOn.SystemModelGroup.Count">
      <summary>Count of system groups.</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.SystemModelGroup.Item">
      <summary>Returns the system group at the given index.</summary>
    </member>
    <member name="T:zenOn.SystemModelManager" />
    <member name="P:zenOn.SystemModelManager.Count">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.Export">
      <summary>Exports system model list</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.GroupByGuid">
      <summary>Returns the system group with the given id (guid).</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.Import">
      <summary>Imports system model list</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.Item">
      <summary>Returns the system model at the given index.</summary>
    </member>
    <member name="M:zenOn.SystemModelManager.ModelByName">
      <summary>Returns the system model with the given id (guid).</summary>
    </member>
    <member name="E:zenOn.SystemModelManager.ModelGroupSelected" />
    <member name="T:zenOn.Task" />
    <member name="P:zenOn.Task.ActualCycleTime" />
    <member name="P:zenOn.Task.CountVariable" />
    <member name="P:zenOn.Task.CycleTime" />
    <member name="P:zenOn.Task.ErrorNumber" />
    <member name="P:zenOn.Task.ErrorString" />
    <member name="P:zenOn.Task.Name" />
    <member name="P:zenOn.Task.Parent" />
    <member name="P:zenOn.Task.Priority" />
    <member name="P:zenOn.Task.Status" />
    <member name="P:zenOn.Task.Type" />
    <member name="M:zenOn.Task.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Task.ItemVariable">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.MemValue [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.MemValue [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.Run">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.Sleep">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.StartTimer">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.Stop">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.StopTimer">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.Value [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Task.Value [PUT]">
      <summary>-</summary>
    </member>
    <member name="E:zenOn.Task.Exit" />
    <member name="E:zenOn.Task.Init" />
    <member name="E:zenOn.Task.Main" />
    <member name="E:zenOn.Task.Timer" />
    <member name="T:zenOn.Tasks" />
    <member name="P:zenOn.Tasks.Count" />
    <member name="P:zenOn.Tasks.Parent" />
    <member name="M:zenOn.Tasks.Item">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Template" />
    <member name="P:zenOn.Template.BackgroundColor">
      <summary>BackColor</summary>
    </member>
    <member name="P:zenOn.Template.BackgroundGraphicAlignment" />
    <member name="P:zenOn.Template.BackgroundImage">
      <summary>Image for the Template</summary>
    </member>
    <member name="P:zenOn.Template.BackgroundImageStyle">
      <summary>Style for the Image</summary>
    </member>
    <member name="P:zenOn.Template.BorderStyle">
      <summary>Style of the template-border (for resizing)</summary>
    </member>
    <member name="P:zenOn.Template.Bottom">
      <summary>Bottom-coordinate of the template</summary>
    </member>
    <member name="P:zenOn.Template.FrameBorderStyle" />
    <member name="P:zenOn.Template.Height">
      <summary>Height of the template</summary>
    </member>
    <member name="P:zenOn.Template.Left">
      <summary>Left-coordinate of the template</summary>
    </member>
    <member name="P:zenOn.Template.Name">
      <summary>Name of the template (unique)</summary>
    </member>
    <member name="P:zenOn.Template.OpenMultiple">
      <summary>Open a template multiple times</summary>
    </member>
    <member name="P:zenOn.Template.Parent">
      <summary>Returns the parent object</summary>
    </member>
    <member name="P:zenOn.Template.Right">
      <summary>Right-coordinate of the template</summary>
    </member>
    <member name="P:zenOn.Template.ShowForeground">
      <summary>Shows template always in the foreground</summary>
    </member>
    <member name="P:zenOn.Template.ShowMinimize">
      <summary>Shows the windows minimize button</summary>
    </member>
    <member name="P:zenOn.Template.ShowSysMenu">
      <summary>Shows the windows system menu</summary>
    </member>
    <member name="P:zenOn.Template.ShowTitle">
      <summary>Shows titlebar for the template</summary>
    </member>
    <member name="P:zenOn.Template.Style">
      <summary>Style of the template-window</summary>
    </member>
    <member name="P:zenOn.Template.Top">
      <summary>Top-coordinate of the template</summary>
    </member>
    <member name="P:zenOn.Template.Width">
      <summary>Width of the template</summary>
    </member>
    <member name="M:zenOn.Template.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Template.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Template.Copy">
      <summary>Copies the template</summary>
    </member>
    <member name="M:zenOn.Template.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Template.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Template.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Template.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Template.Export">
      <summary>Export the given template</summary>
    </member>
    <member name="M:zenOn.Template.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Template.Import">
      <summary>Import a template</summary>
    </member>
    <member name="M:zenOn.Template.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Template.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Template.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Template.Save">
      <summary>Save changes</summary>
    </member>
    <member name="M:zenOn.Template.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.Templates" />
    <member name="P:zenOn.Templates.Count">
      <summary>Returns count of the elements</summary>
    </member>
    <member name="P:zenOn.Templates.Parent">
      <summary>The parent object of the current object</summary>
    </member>
    <member name="M:zenOn.Templates.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.Templates.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.Templates.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Templates.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Templates.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Templates.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Templates.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Templates.ExportToXmlByIndex" />
    <member name="M:zenOn.Templates.ExportToXmlByName" />
    <member name="M:zenOn.Templates.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Templates.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="T:zenOn.TextList" />
    <member name="P:zenOn.TextList.Count">
      <summary>Returns the amount of Text-List items</summary>
    </member>
    <member name="P:zenOn.TextList.Description">
      <summary>Returns the description of the Text-List</summary>
    </member>
    <member name="P:zenOn.TextList.Guid">
      <summary>Returns the Guid of the Text-List</summary>
    </member>
    <member name="P:zenOn.TextList.Name">
      <summary>Returns the name of the Text-List</summary>
    </member>
    <member name="P:zenOn.TextList.Parent">
      <summary>Returns the parent object of the current object</summary>
    </member>
    <member name="P:zenOn.TextList.Removed">
      <summary>Returns the Removed status of the Text-List</summary>
    </member>
    <member name="M:zenOn.TextList.Create">
      <summary>Creates and returns new Text-List object</summary>
    </member>
    <member name="M:zenOn.TextList.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="T:zenOn.TextListManager" />
    <member name="P:zenOn.TextListManager.Count">
      <summary>Returns the amount of Text-List Items</summary>
    </member>
    <member name="P:zenOn.TextListManager.Parent">
      <summary>Returns the parent object of the current object</summary>
    </member>
    <member name="M:zenOn.TextListManager.Create">
      <summary>Creates and returns new Text-List object</summary>
    </member>
    <member name="M:zenOn.TextListManager.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.TextListManager.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.TextListManager.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.TextListManager.Save">
      <summary>Saves the Text-List</summary>
    </member>
    <member name="E:zenOn.TextListManager.SelectionChanged">
      <summary>This event is fired when the selection in the Text-List screen changes</summary>
    </member>
    <member name="E:zenOn.TextListManager.TextListsChanged">
      <summary>This event is fired when the data or structure from Text-List Items has changed</summary>
    </member>
    <member name="T:zenOn.TimeFunction" />
    <member name="P:zenOn.TimeFunction.Active" />
    <member name="P:zenOn.TimeFunction.Cycled" />
    <member name="P:zenOn.TimeFunction.ID">
      <summary>Returns count of contained objects</summary>
    </member>
    <member name="P:zenOn.TimeFunction.IntervalTime">
      <summary>Returns count of contained objects</summary>
    </member>
    <member name="P:zenOn.TimeFunction.MonthSwitch">
      <summary>Returns time-function by position or ID</summary>
    </member>
    <member name="P:zenOn.TimeFunction.Name">
      <summary>Returns time-function by position or ID</summary>
    </member>
    <member name="P:zenOn.TimeFunction.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="P:zenOn.TimeFunction.StartTime">
      <summary>Parent of object</summary>
    </member>
    <member name="P:zenOn.TimeFunction.YearSwitch" />
    <member name="M:zenOn.TimeFunction.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.TimeFunction.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.IsDaySelected">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.TimeFunction.ItemRtFunction">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.SetDaySelected">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.TimeFunction.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.TimeFunctions" />
    <member name="P:zenOn.TimeFunctions.Count">
      <summary>Returns count of contained objects</summary>
    </member>
    <member name="P:zenOn.TimeFunctions.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.TimeFunctions.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.Units" />
    <member name="M:zenOn.Units.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Units.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Units.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Units.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Units.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Units.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.Units.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="T:zenOn.User" />
    <member name="P:zenOn.User.Active">
      <summary>Activate/Deactivate user</summary>
    </member>
    <member name="P:zenOn.User.Admin">
      <summary>User has admin rights</summary>
    </member>
    <member name="P:zenOn.User.CanPowerUserModifyPowerUsers" />
    <member name="P:zenOn.User.Identification">
      <summary>TagName</summary>
    </member>
    <member name="P:zenOn.User.Level">
      <summary>Rights/Password-Levels 0</summary>
    </member>
    <member name="P:zenOn.User.Level1">
      <summary>Rights/Password-Levels 1</summary>
    </member>
    <member name="P:zenOn.User.Level2">
      <summary>Rights/Password-Levels 2</summary>
    </member>
    <member name="P:zenOn.User.Level3">
      <summary>Rights/Password-Levels 3</summary>
    </member>
    <member name="P:zenOn.User.Locked">
      <summary>Lock/Unlock user</summary>
    </member>
    <member name="P:zenOn.User.Name">
      <summary>Name</summary>
    </member>
    <member name="P:zenOn.User.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.User.UserType" />
    <member name="M:zenOn.User.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.User.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.User.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.User.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.User.IdentificationChange">
      <summary>Changes the TagName</summary>
    </member>
    <member name="M:zenOn.User.PasswordChange">
      <summary>Changes the password</summary>
    </member>
    <member name="T:zenOn.UserGroup" />
    <member name="M:zenOn.UserGroup.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.UserGroup.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.UserGroup.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.UserGroup.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.UserGroup.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="T:zenOn.VarAssignment" />
    <member name="P:zenOn.VarAssignment.ID">
      <summary>Set/Get unique ID for the object</summary>
    </member>
    <member name="P:zenOn.VarAssignment.Name">
      <summary>Set/Get the user-defined name</summary>
    </member>
    <member name="P:zenOn.VarAssignment.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="M:zenOn.VarAssignment.ChangeSourceVariable">
      <summary>Change source (can be member of another project)</summary>
    </member>
    <member name="M:zenOn.VarAssignment.ChangeTargetVariable">
      <summary>Change target (can be member of another project)</summary>
    </member>
    <member name="M:zenOn.VarAssignment.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarAssignment.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarAssignment.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarAssignment.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.VarAssignment.ItemSourceVariable">
      <summary>Get the linked source variable</summary>
    </member>
    <member name="M:zenOn.VarAssignment.ItemTargetVariable">
      <summary>Get the linked target variable</summary>
    </member>
    <member name="T:zenOn.VarAssignments" />
    <member name="P:zenOn.VarAssignments.Count">
      <summary>Returns count of contained objects</summary>
    </member>
    <member name="P:zenOn.VarAssignments.Parent">
      <summary>Parent of object</summary>
    </member>
    <member name="M:zenOn.VarAssignments.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Create">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.VarAssignments.CreateByID">
      <summary>Creates and returns a new Object</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Delete">
      <summary>Deletes the objects from collection</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.VarAssignments.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.VarAssignments.Item">
      <summary>Returns a object at a position or by a specified key</summary>
    </member>
    <member name="M:zenOn.VarAssignments.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.VarAssignments.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.Variable" />
    <member name="P:zenOn.Variable.Alignment" />
    <member name="P:zenOn.Variable.AlternateArchiveValue" />
    <member name="P:zenOn.Variable.AlternateValue">
      <summary>For internal use only</summary>
    </member>
    <member name="P:zenOn.Variable.ArraySize" />
    <member name="P:zenOn.Variable.BaseType" />
    <member name="P:zenOn.Variable.BitAddr" />
    <member name="P:zenOn.Variable.DataBlock" />
    <member name="P:zenOn.Variable.DataType" />
    <member name="P:zenOn.Variable.Digits" />
    <member name="P:zenOn.Variable.IsArray" />
    <member name="P:zenOn.Variable.LastUpdateTime" />
    <member name="P:zenOn.Variable.LastUpdateTimeMilliSeconds" />
    <member name="P:zenOn.Variable.Name" />
    <member name="P:zenOn.Variable.NetAddr" />
    <member name="P:zenOn.Variable.Offset" />
    <member name="P:zenOn.Variable.Parent" />
    <member name="P:zenOn.Variable.PvID" />
    <member name="P:zenOn.Variable.RangeMax" />
    <member name="P:zenOn.Variable.RangeMin" />
    <member name="P:zenOn.Variable.ReadOnly" />
    <member name="P:zenOn.Variable.Recourceslabel" />
    <member name="P:zenOn.Variable.ServiceGridAccessPermission">
      <summary>Returns the enum ServiceGridAccessPermissionLevel with the options "None","Read" and "ReadAndWrite".</summary>
    </member>
    <member name="P:zenOn.Variable.SignalMax" />
    <member name="P:zenOn.Variable.SignalMin" />
    <member name="P:zenOn.Variable.StatusExtValue" />
    <member name="P:zenOn.Variable.StatusString" />
    <member name="P:zenOn.Variable.StatusValue" />
    <member name="P:zenOn.Variable.StringLength" />
    <member name="P:zenOn.Variable.Tagname" />
    <member name="P:zenOn.Variable.Unit" />
    <member name="P:zenOn.Variable.UserValue" />
    <member name="M:zenOn.Variable.ActivateSubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.CalcPrimaryUnitValue">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.CalcSecondaryUnitValue">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.CreateDynProperty">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.CreateEdLimit">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.DeactivateSubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.DeleteEdLimit">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.Driver" />
    <member name="M:zenOn.Variable.DynProperties [GET]" />
    <member name="M:zenOn.Variable.DynProperties [PUT]" />
    <member name="M:zenOn.Variable.DynPropertiesEnum [GET]" />
    <member name="M:zenOn.Variable.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.Variable.EdLimitCount" />
    <member name="M:zenOn.Variable.EdLimitItem" />
    <member name="M:zenOn.Variable.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.GetCurrentViolatedLimit">
      <summary>Returns the current violated limit, if there is one.</summary>
    </member>
    <member name="M:zenOn.Variable.GetCurrentViolatedRema">
      <summary>Returns the current violated rema state.</summary>
    </member>
    <member name="M:zenOn.Variable.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.IsLimitActiv">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.IsOnline">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.IsRDAActiv">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.IsRemaActiv">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.Limits">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.ModifyAlternateValue">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SecondaryUnitDigits [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SecondaryUnitName [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SetValueWithStatus">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SubItemCount">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.SubItemName">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.Variable.Value [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variable.Value [PUT]">
      <summary>-</summary>
    </member>
    <member name="T:zenOn.Variables" />
    <member name="P:zenOn.Variables.Count" />
    <member name="P:zenOn.Variables.Parent" />
    <member name="M:zenOn.Variables.CheckInModule">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Variables.CheckOutModule">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Variables.CreateArrayVar">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.CreateArrayVarEx">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.CreateVar">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.DeleteVar">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.DoAutoSave">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.Export">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.GetServiceGridVariables">
      <summary>This function can be used to retrieve a String-Array containing all variables for which the "ServiceGridAccessPermission" has been set to the given level.</summary>
    </member>
    <member name="M:zenOn.Variables.Import">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.ImportDirect">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.Variables.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.ItemPvID">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.Variables.ModifyArrayVariable">
      <summary>Modify the given array variable to match the new configuration.</summary>
    </member>
    <member name="M:zenOn.Variables.ModifyVariable">
      <summary>Modify the given variable to match the new configuration.</summary>
    </member>
    <member name="M:zenOn.Variables.ShowCreateDialog">
      <summary>Opens the zenon standard dialog "Create variable".</summary>
    </member>
    <member name="M:zenOn.Variables.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.VariableValue" />
    <member name="P:zenOn.VariableValue.Status">
      <summary>First 32 bits of the variable state</summary>
    </member>
    <member name="P:zenOn.VariableValue.StatusExt">
      <summary>Last 32 bits of the variable state</summary>
    </member>
    <member name="P:zenOn.VariableValue.Time">
      <summary>Timestamp of the value</summary>
    </member>
    <member name="P:zenOn.VariableValue.TimeMilliseconds">
      <summary>Milliseconds of the timestamp</summary>
    </member>
    <member name="P:zenOn.VariableValue.Value">
      <summary>Value of the variable</summary>
    </member>
    <member name="T:zenOn.VarType" />
    <member name="P:zenOn.VarType.ID" />
    <member name="P:zenOn.VarType.Name" />
    <member name="P:zenOn.VarType.Parent" />
    <member name="M:zenOn.VarType.CanDeleteType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.CreateEdLimit">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DeleteEdLimit">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DeleteSubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.VarType.EdLimitCount">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.EdLimitItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.GetDataType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.IsAllowed">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.VarType.IsSimple">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.IsSimpleDataType [GET]" />
    <member name="M:zenOn.VarType.IsSupportedByDriver" />
    <member name="M:zenOn.VarType.NewSubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.SubItem">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.SubItemCount">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarType.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.VarTypes" />
    <member name="P:zenOn.VarTypes.Count" />
    <member name="P:zenOn.VarTypes.Parent" />
    <member name="M:zenOn.VarTypes.CanDeleteType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.CreateComplexType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.CreateSimpleType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.DeleteType">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.VarTypes.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.VarTypes.ImportDirect">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.Item">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.VarTypes.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="T:zenOn.ZenMenu" />
    <member name="P:zenOn.ZenMenu.BackColor">
      <summary>BackColor</summary>
    </member>
    <member name="P:zenOn.ZenMenu.Count">
      <summary>Count of defined menu-items</summary>
    </member>
    <member name="P:zenOn.ZenMenu.ID">
      <summary>Returns the unique ID for the menu</summary>
    </member>
    <member name="P:zenOn.ZenMenu.IsPulldown">
      <summary>Is the menu a pulldown menu (true) or a popup menu (false)</summary>
    </member>
    <member name="P:zenOn.ZenMenu.Name">
      <summary>Name of the menu</summary>
    </member>
    <member name="P:zenOn.ZenMenu.Notes">
      <summary>Notes to the menu</summary>
    </member>
    <member name="P:zenOn.ZenMenu.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.ZenMenu.TextColor">
      <summary>TextColor</summary>
    </member>
    <member name="M:zenOn.ZenMenu.Create">
      <summary>Creates a new menu-item</summary>
    </member>
    <member name="M:zenOn.ZenMenu.Delete">
      <summary>Deletes the given menu-item</summary>
    </member>
    <member name="M:zenOn.ZenMenu.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenu.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenu.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenu.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.ZenMenu.Item">
      <summary>Returns a menu-item by position or name</summary>
    </member>
    <member name="T:zenOn.ZenMenuItem" />
    <member name="P:zenOn.ZenMenuItem.ActionID">
      <summary>ID of the variable/rt-function/macro/help-ID</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Caption">
      <summary>Caption of the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Checked">
      <summary>Menu-item has checkbox</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Count">
      <summary>Count of defined menu-items</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Enabled">
      <summary>Enables/Disables the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Guid">
      <summary>Project-GUID by variables of a other project</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.HelpFile">
      <summary>Helpfile for execution (Type = tpZenHelp)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.HelpTopic">
      <summary>Help-ID for execution (Type = tpZenHelp)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.ID">
      <summary>Returns the unique ID for the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.MenuID">
      <summary>Returns the unique ID for the menu</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Name">
      <summary>Unique Name of the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.ParentID">
      <summary>Returns the unique ID for the parent menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Password">
      <summary>Password-level for execution</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Picture">
      <summary>Bitmap-file of the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Popup">
      <summary>Menu-item contains sub-items</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Seperator">
      <summary>Menu-item is a seperator (no execution)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.SetValue">
      <summary>Defined SetValue  (Type = tpVariable)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.ShowSetValueDlg">
      <summary>Show set-value dialog (Type = tpVariable)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.ToolTip">
      <summary>Tooltip-Text for the menu-item</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Type">
      <summary>Type of the menu-item (Variable/RtFunction/Help/Macro)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.UseCurValue">
      <summary>Use current set-value of the variable (Type = tpVariable)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.VarFromElement">
      <summary>Use Variable from the linked element (Type = tpVariable)</summary>
    </member>
    <member name="P:zenOn.ZenMenuItem.Visible">
      <summary>Shows/hides the menu-item</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.Create">
      <summary>Creates a new menu-item</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.Delete">
      <summary>Deletes the given menu-item</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.DynProperties [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.DynProperties [PUT]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.DynPropertiesEnum [GET]">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.DynPropertyParam [GET]">
      <summary>Returns the PropParam objekt of the given DynProperty</summary>
    </member>
    <member name="M:zenOn.ZenMenuItem.Item">
      <summary>Returns a menu-item by position or name</summary>
    </member>
    <member name="T:zenOn.ZenMenus" />
    <member name="P:zenOn.ZenMenus.Count">
      <summary>Count of defined menus</summary>
    </member>
    <member name="P:zenOn.ZenMenus.Parent">
      <summary>Parent-object</summary>
    </member>
    <member name="M:zenOn.ZenMenus.CheckIn">
      <summary>Save module modifications to server (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.CheckOut">
      <summary>Allow module modifications (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Create">
      <summary>Creates a new menu</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Delete">
      <summary>Deletes the given menu</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Export">
      <summary>Exports the selected object to a XML file</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Get">
      <summary>Get the latest version from the server (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Import">
      <summary>Imports the selected XML file</summary>
    </member>
    <member name="M:zenOn.ZenMenus.IsCheckedOut">
      <summary>Returns true when the current module checked out by the current user (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.IsDifferent">
      <summary>Returns true when the local and server version are different (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.IsLocked">
      <summary>Returns true when the current module is Locked by another user (editor).</summary>
    </member>
    <member name="M:zenOn.ZenMenus.Item">
      <summary>Returns the menu by name or position</summary>
    </member>
    <member name="M:zenOn.ZenMenus.SingleExport">
      <summary>Exports the Item with given Name oder Index</summary>
    </member>
    <member name="M:zenOn.ZenMenus.UndoCheckOut">
      <summary>Undo module modifications (editor).</summary>
    </member>
    <member name="T:zenOn.ZenWorkspace" />
    <member name="P:zenOn.ZenWorkspace.ActiveDocument" />
    <member name="P:zenOn.ZenWorkspace.Application" />
    <member name="P:zenOn.ZenWorkspace.LoadedWorkspace" />
    <member name="P:zenOn.ZenWorkspace.Name" />
    <member name="P:zenOn.ZenWorkspace.Parent" />
    <member name="P:zenOn.ZenWorkspace.Symbols">
      <summary>Returns the Symbols object</summary>
    </member>
    <member name="P:zenOn.ZenWorkspace.VBE">
      <summary>Returns the VBE-extensibility object</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.ActivateProject">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.CloseWorkspace">
      <summary>Closes the workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.CopyProject">
      <summary>Creates a copy of the given Project at the given location.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.CreateBackup">
      <summary>Creates a backup of the currently workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.CreateProjectBackup">
      <summary>Create a backup of the given project.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.CreateWorkspace">
      <summary>Creates a new workspace with the given name at the given location.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.GetArvTemplates">
      <summary>Returns a collection of Archive templates (either by name or by index).</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.GetMDiTemplates">
      <summary>Returns a collection of MDI templates of the specified type (either by name or by index).</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.InsertProject">
      <summary>Inserts the given project into the workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.LoadProject">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.LoadProjectByName">
      <summary>Loads the given project by Name.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.LoadWorkspace">
      <summary>Loads the given workspace file.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.RemoveProject">
      <summary>Removes the given project from the workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.RestoreBackup">
      <summary>Restores the given workspace backup.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.RestoreProjectBackup">
      <summary>Restores the given backup.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.SaveWorkspace">
      <summary>Saves the current workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.SetStartProject">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.UnloadedProjects [GET]">
      <summary>Returns a list of all unloaded projects available in the current workspace.</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.UnloadProject">
      <summary>-</summary>
    </member>
    <member name="M:zenOn.ZenWorkspace.UnloadProject2">
      <summary>Unloads a project in the workspace over its uniqe GUID.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.ActiveProjectChanged">
      <summary>Is triggered after the active project in the workspace has changed in the Engineering Studio.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnElementCreated" />
    <member name="E:zenOn.ZenWorkspace.OnElementDeleted" />
    <member name="E:zenOn.ZenWorkspace.OnElementDoubleClicked" />
    <member name="E:zenOn.ZenWorkspace.OnObjectCreated" />
    <member name="E:zenOn.ZenWorkspace.OnPostBackupProject">
      <summary>Event is fired after a project backup has been created.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPostBuild">
      <summary>Event is fired after a project is compiled</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPostObjectDeleted" />
    <member name="E:zenOn.ZenWorkspace.OnPostRestoreProject">
      <summary>Event is fired after a project backup has been restored.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPostTransport">
      <summary>Event is fired after a project is transported</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPostVSTAUpdate">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreBackupProject">
      <summary>Event is fired before a project backup is about to be created.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreBuild">
      <summary>Event is fired before a project is compiled</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreProjectUnload">
      <summary>Event is fired when a project is about to be unloaded (editor only).</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreRestoreProject">
      <summary>Event is fired before a project backup is about to be restored.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreTransport">
      <summary>Event is fired before a project is transported</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreVSTADebugStart">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreVSTADebugStop">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnPreVSTAUpdate">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnProjectLoaded">
      <summary>Event is fired when a project has been loaded (editor only).</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnRTConnect">
      <summary>Event is fired when a remote transport connection has been established.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnRTConnectionFailed">
      <summary>Event is fired when a connection timeout has occured, and a remote transport connection could not be established.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnRTConnectionTerminated">
      <summary>Event is fired when a remote transport connection has been terminated.</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnVSTADebugStart">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnVSTADebugStopped">
      <summary>For internal use only</summary>
    </member>
    <member name="E:zenOn.ZenWorkspace.OnWorkspaceExit" />
    <member name="E:zenOn.ZenWorkspace.OnWorkspaceStartup" />
    <member name="E:zenOn.ZenWorkspace.WorkspaceChanged" />
  </members>
</doc>